
01_GENERATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ad4  08005ccc  08005ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a0  080087a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080087a0  080087a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087a0  080087a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087a4  080087a4  000187a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080087a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e0  20000010  080087b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024f0  080087b8  000224f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161c8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab8  00000000  00000000  00036208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00038cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020594  00000000  00000000  00039ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000115ba  00000000  00000000  0005a484  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c368f  00000000  00000000  0006ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0012f0cd  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000010e0  00000000  00000000  0012f148  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004d1c  00000000  00000000  00130228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cb4 	.word	0x08005cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005cb4 	.word	0x08005cb4

080001c8 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d005      	beq.n	80001ea <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 80001de:	2201      	movs	r2, #1
 80001e0:	2102      	movs	r1, #2
 80001e2:	4811      	ldr	r0, [pc, #68]	; (8000228 <ssd1331_write_byte+0x60>)
 80001e4:	f003 fa7c 	bl	80036e0 <HAL_GPIO_WritePin>
 80001e8:	e004      	b.n	80001f4 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 80001ea:	2200      	movs	r2, #0
 80001ec:	2102      	movs	r1, #2
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <ssd1331_write_byte+0x60>)
 80001f0:	f003 fa76 	bl	80036e0 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 80001f4:	2200      	movs	r2, #0
 80001f6:	2120      	movs	r1, #32
 80001f8:	480c      	ldr	r0, [pc, #48]	; (800022c <ssd1331_write_byte+0x64>)
 80001fa:	f003 fa71 	bl	80036e0 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 80001fe:	1df9      	adds	r1, r7, #7
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	2201      	movs	r2, #1
 8000206:	480a      	ldr	r0, [pc, #40]	; (8000230 <ssd1331_write_byte+0x68>)
 8000208:	f004 fec1 	bl	8004f8e <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 800020c:	2201      	movs	r2, #1
 800020e:	2120      	movs	r1, #32
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <ssd1331_write_byte+0x64>)
 8000212:	f003 fa65 	bl	80036e0 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000216:	2201      	movs	r2, #1
 8000218:	2102      	movs	r1, #2
 800021a:	4803      	ldr	r0, [pc, #12]	; (8000228 <ssd1331_write_byte+0x60>)
 800021c:	f003 fa60 	bl	80036e0 <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	48000400 	.word	0x48000400
 800022c:	48000800 	.word	0x48000800
 8000230:	2000219c 	.word	0x2000219c

08000234 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	460b      	mov	r3, r1
 8000240:	71bb      	strb	r3, [r7, #6]
 8000242:	4613      	mov	r3, r2
 8000244:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b5f      	cmp	r3, #95	; 0x5f
 800024a:	d82b      	bhi.n	80002a4 <ssd1331_draw_point+0x70>
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	2b3f      	cmp	r3, #63	; 0x3f
 8000250:	d828      	bhi.n	80002a4 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000252:	2100      	movs	r1, #0
 8000254:	2015      	movs	r0, #21
 8000256:	f7ff ffb7 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ffb2 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000264:	2100      	movs	r1, #0
 8000266:	205f      	movs	r0, #95	; 0x5f
 8000268:	f7ff ffae 	bl	80001c8 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 800026c:	2100      	movs	r1, #0
 800026e:	2075      	movs	r0, #117	; 0x75
 8000270:	f7ff ffaa 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffa5 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 800027e:	2100      	movs	r1, #0
 8000280:	203f      	movs	r0, #63	; 0x3f
 8000282:	f7ff ffa1 	bl	80001c8 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000286:	88bb      	ldrh	r3, [r7, #4]
 8000288:	0a1b      	lsrs	r3, r3, #8
 800028a:	b29b      	uxth	r3, r3
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2101      	movs	r1, #1
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ff99 	bl	80001c8 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8000296:	88bb      	ldrh	r3, [r7, #4]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2101      	movs	r1, #1
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff93 	bl	80001c8 <ssd1331_write_byte>
 80002a2:	e000      	b.n	80002a6 <ssd1331_draw_point+0x72>
		return;
 80002a4:	bf00      	nop
}
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	71fb      	strb	r3, [r7, #7]
 80002be:	4603      	mov	r3, r0
 80002c0:	71bb      	strb	r3, [r7, #6]
 80002c2:	460b      	mov	r3, r1
 80002c4:	717b      	strb	r3, [r7, #5]
 80002c6:	4613      	mov	r3, r2
 80002c8:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	733b      	strb	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b5f      	cmp	r3, #95	; 0x5f
 80002d2:	d850      	bhi.n	8000376 <ssd1331_display_char+0xca>
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	2b3f      	cmp	r3, #63	; 0x3f
 80002d8:	d84d      	bhi.n	8000376 <ssd1331_display_char+0xca>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 80002da:	2300      	movs	r3, #0
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	e045      	b.n	800036c <ssd1331_display_char+0xc0>
		if (FONT_1206 == chSize) {
 80002e0:	793b      	ldrb	r3, [r7, #4]
 80002e2:	2b0c      	cmp	r3, #12
 80002e4:	d10d      	bne.n	8000302 <ssd1331_display_char+0x56>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 80002e6:	797b      	ldrb	r3, [r7, #5]
 80002e8:	f1a3 0220 	sub.w	r2, r3, #32
 80002ec:	7bf9      	ldrb	r1, [r7, #15]
 80002ee:	4824      	ldr	r0, [pc, #144]	; (8000380 <ssd1331_display_char+0xd4>)
 80002f0:	4613      	mov	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	4413      	add	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4403      	add	r3, r0
 80002fa:	440b      	add	r3, r1
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	737b      	strb	r3, [r7, #13]
 8000300:	e00c      	b.n	800031c <ssd1331_display_char+0x70>
		} else if (FONT_1608 == chSize) { 
 8000302:	793b      	ldrb	r3, [r7, #4]
 8000304:	2b10      	cmp	r3, #16
 8000306:	d109      	bne.n	800031c <ssd1331_display_char+0x70>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000308:	797b      	ldrb	r3, [r7, #5]
 800030a:	f1a3 0220 	sub.w	r2, r3, #32
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	491c      	ldr	r1, [pc, #112]	; (8000384 <ssd1331_display_char+0xd8>)
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	440a      	add	r2, r1
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 800031c:	2300      	movs	r3, #0
 800031e:	73bb      	strb	r3, [r7, #14]
 8000320:	e01e      	b.n	8000360 <ssd1331_display_char+0xb4>
    		if (chTemp & 0x80) {
 8000322:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000326:	2b00      	cmp	r3, #0
 8000328:	da05      	bge.n	8000336 <ssd1331_display_char+0x8a>
				ssd1331_draw_point(chXpos, chYpos, hwColor);
 800032a:	8c3a      	ldrh	r2, [r7, #32]
 800032c:	79b9      	ldrb	r1, [r7, #6]
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff7f 	bl	8000234 <ssd1331_draw_point>
    		}			
			chTemp <<= 1;
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	3301      	adds	r3, #1
 8000340:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8000342:	79ba      	ldrb	r2, [r7, #6]
 8000344:	7b3b      	ldrb	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	793b      	ldrb	r3, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	d105      	bne.n	800035a <ssd1331_display_char+0xae>
				chYpos = chYpos0;
 800034e:	7b3b      	ldrb	r3, [r7, #12]
 8000350:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	3301      	adds	r3, #1
 8000356:	71fb      	strb	r3, [r7, #7]
				break;
 8000358:	e005      	b.n	8000366 <ssd1331_display_char+0xba>
        for (j = 0; j < 8; j ++) {
 800035a:	7bbb      	ldrb	r3, [r7, #14]
 800035c:	3301      	adds	r3, #1
 800035e:	73bb      	strb	r3, [r7, #14]
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	2b07      	cmp	r3, #7
 8000364:	d9dd      	bls.n	8000322 <ssd1331_display_char+0x76>
    for (i = 0; i < chSize; i ++) {   
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	3301      	adds	r3, #1
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	7bfa      	ldrb	r2, [r7, #15]
 800036e:	793b      	ldrb	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	d3b5      	bcc.n	80002e0 <ssd1331_display_char+0x34>
 8000374:	e000      	b.n	8000378 <ssd1331_display_char+0xcc>
		return;
 8000376:	bf00      	nop
			}
		}  	 
    } 
}
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bd90      	pop	{r4, r7, pc}
 800037e:	bf00      	nop
 8000380:	08005d0c 	.word	0x08005d0c
 8000384:	08006180 	.word	0x08006180

08000388 <_pow>:

static uint32_t _pow(uint8_t m, uint8_t n)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	460a      	mov	r2, r1
 8000392:	71fb      	strb	r3, [r7, #7]
 8000394:	4613      	mov	r3, r2
 8000396:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000398:	2301      	movs	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
	
	while(n --) result *= m;    
 800039c:	e004      	b.n	80003a8 <_pow+0x20>
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	79bb      	ldrb	r3, [r7, #6]
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	71ba      	strb	r2, [r7, #6]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1f5      	bne.n	800039e <_pow+0x16>
	return result;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <ssd1331_display_num>:


void ssd1331_display_num(uint8_t chXpos, uint8_t chYpos, uint32_t chNum, uint8_t chLen, uint8_t chSize, uint16_t hwColor)
{         	
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af02      	add	r7, sp, #8
 80003c6:	603a      	str	r2, [r7, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
 80003ce:	460b      	mov	r3, r1
 80003d0:	71bb      	strb	r3, [r7, #6]
 80003d2:	4613      	mov	r3, r2
 80003d4:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t chTemp, chShow = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	73bb      	strb	r3, [r7, #14]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b5f      	cmp	r3, #95	; 0x5f
 80003de:	d85e      	bhi.n	800049e <ssd1331_display_num+0xde>
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b3f      	cmp	r3, #63	; 0x3f
 80003e4:	d85b      	bhi.n	800049e <ssd1331_display_num+0xde>
		return;
	}
	
	for(i = 0; i < chLen; i ++) {
 80003e6:	2300      	movs	r3, #0
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	e053      	b.n	8000494 <ssd1331_display_num+0xd4>
		chTemp = (chNum / _pow(10, chLen - i - 1)) % 10;
 80003ec:	797a      	ldrb	r2, [r7, #5]
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	3b01      	subs	r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	200a      	movs	r0, #10
 80003fc:	f7ff ffc4 	bl	8000388 <_pow>
 8000400:	4602      	mov	r2, r0
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	fbb3 f1f2 	udiv	r1, r3, r2
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <ssd1331_display_num+0xe8>)
 800040a:	fba3 2301 	umull	r2, r3, r3, r1
 800040e:	08da      	lsrs	r2, r3, #3
 8000410:	4613      	mov	r3, r2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4413      	add	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	1aca      	subs	r2, r1, r3
 800041a:	4613      	mov	r3, r2
 800041c:	737b      	strb	r3, [r7, #13]
		if(chShow == 0 && i < (chLen - 1)) {
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d11e      	bne.n	8000462 <ssd1331_display_num+0xa2>
 8000424:	7bfa      	ldrb	r2, [r7, #15]
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	3b01      	subs	r3, #1
 800042a:	429a      	cmp	r2, r3
 800042c:	da19      	bge.n	8000462 <ssd1331_display_num+0xa2>
			if(chTemp == 0) {
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d114      	bne.n	800045e <ssd1331_display_num+0x9e>
				ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, ' ', chSize, hwColor);
 8000434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000438:	085b      	lsrs	r3, r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	fb12 f303 	smulbb	r3, r2, r3
 8000442:	b2da      	uxtb	r2, r3
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4413      	add	r3, r2
 8000448:	b2d8      	uxtb	r0, r3
 800044a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800044e:	79b9      	ldrb	r1, [r7, #6]
 8000450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	4613      	mov	r3, r2
 8000456:	2220      	movs	r2, #32
 8000458:	f7ff ff28 	bl	80002ac <ssd1331_display_char>
				continue;
 800045c:	e017      	b.n	800048e <ssd1331_display_num+0xce>
			} else {
				chShow = 1;
 800045e:	2301      	movs	r3, #1
 8000460:	73bb      	strb	r3, [r7, #14]
			}	 
		}
	 	ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, chTemp + '0', chSize, hwColor); 
 8000462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000466:	085b      	lsrs	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	7bfa      	ldrb	r2, [r7, #15]
 800046c:	fb12 f303 	smulbb	r3, r2, r3
 8000470:	b2da      	uxtb	r2, r3
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4413      	add	r3, r2
 8000476:	b2d8      	uxtb	r0, r3
 8000478:	7b7b      	ldrb	r3, [r7, #13]
 800047a:	3330      	adds	r3, #48	; 0x30
 800047c:	b2da      	uxtb	r2, r3
 800047e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000482:	79b9      	ldrb	r1, [r7, #6]
 8000484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	4623      	mov	r3, r4
 800048a:	f7ff ff0f 	bl	80002ac <ssd1331_display_char>
	for(i = 0; i < chLen; i ++) {
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	3301      	adds	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	7bfa      	ldrb	r2, [r7, #15]
 8000496:	797b      	ldrb	r3, [r7, #5]
 8000498:	429a      	cmp	r2, r3
 800049a:	d3a7      	bcc.n	80003ec <ssd1331_display_num+0x2c>
 800049c:	e000      	b.n	80004a0 <ssd1331_display_num+0xe0>
		return;
 800049e:	bf00      	nop
	}
} 
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd90      	pop	{r4, r7, pc}
 80004a6:	bf00      	nop
 80004a8:	cccccccd 	.word	0xcccccccd

080004ac <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchString, uint8_t chSize, uint16_t hwColor)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af02      	add	r7, sp, #8
 80004b2:	603a      	str	r2, [r7, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	71bb      	strb	r3, [r7, #6]
 80004be:	4613      	mov	r3, r2
 80004c0:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b5f      	cmp	r3, #95	; 0x5f
 80004c6:	d836      	bhi.n	8000536 <ssd1331_display_string+0x8a>
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	2b3f      	cmp	r3, #63	; 0x3f
 80004cc:	d833      	bhi.n	8000536 <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 80004ce:	e02d      	b.n	800052c <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	797b      	ldrb	r3, [r7, #5]
 80004d4:	085b      	lsrs	r3, r3, #1
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 80004dc:	429a      	cmp	r2, r3
 80004de:	dd12      	ble.n	8000506 <ssd1331_display_string+0x5a>
			chXpos = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	797b      	ldrb	r3, [r7, #5]
 80004e8:	4413      	add	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 80004ec:	79ba      	ldrb	r2, [r7, #6]
 80004ee:	797b      	ldrb	r3, [r7, #5]
 80004f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dd06      	ble.n	8000506 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8000500:	2000      	movs	r0, #0
 8000502:	f000 f81c 	bl	800053e <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	797c      	ldrb	r4, [r7, #5]
 800050c:	79b9      	ldrb	r1, [r7, #6]
 800050e:	79f8      	ldrb	r0, [r7, #7]
 8000510:	8b3b      	ldrh	r3, [r7, #24]
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4623      	mov	r3, r4
 8000516:	f7ff fec9 	bl	80002ac <ssd1331_display_char>
        chXpos += chSize / 2;
 800051a:	797b      	ldrb	r3, [r7, #5]
 800051c:	085b      	lsrs	r3, r3, #1
 800051e:	b2da      	uxtb	r2, r3
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4413      	add	r3, r2
 8000524:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1cd      	bne.n	80004d0 <ssd1331_display_string+0x24>
 8000534:	e000      	b.n	8000538 <ssd1331_display_string+0x8c>
		return;
 8000536:	bf00      	nop
    } 
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	4603      	mov	r3, r0
 8000546:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000548:	2300      	movs	r3, #0
 800054a:	81fb      	strh	r3, [r7, #14]
 800054c:	e013      	b.n	8000576 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]
 8000552:	e00a      	b.n	800056a <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000554:	89bb      	ldrh	r3, [r7, #12]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	89fa      	ldrh	r2, [r7, #14]
 800055a:	b2d1      	uxtb	r1, r2
 800055c:	88fa      	ldrh	r2, [r7, #6]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe68 	bl	8000234 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000564:	89bb      	ldrh	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	81bb      	strh	r3, [r7, #12]
 800056a:	89bb      	ldrh	r3, [r7, #12]
 800056c:	2b5f      	cmp	r3, #95	; 0x5f
 800056e:	d9f1      	bls.n	8000554 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	3301      	adds	r3, #1
 8000574:	81fb      	strh	r3, [r7, #14]
 8000576:	89fb      	ldrh	r3, [r7, #14]
 8000578:	2b3f      	cmp	r3, #63	; 0x3f
 800057a:	d9e8      	bls.n	800054e <ssd1331_clear_screen+0x10>
		}
	}
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <ssd1331_clear_amp>:

void ssd1331_clear_amp(uint16_t hwColor)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < 15; i ++){ //y -> wysokość cyfry
 800058e:	2300      	movs	r3, #0
 8000590:	81fb      	strh	r3, [r7, #14]
 8000592:	e013      	b.n	80005bc <ssd1331_clear_amp+0x38>
		for(j = 32; j < 80; j ++){ //x -> szerokość całego zapisu
 8000594:	2320      	movs	r3, #32
 8000596:	81bb      	strh	r3, [r7, #12]
 8000598:	e00a      	b.n	80005b0 <ssd1331_clear_amp+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 800059a:	89bb      	ldrh	r3, [r7, #12]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	b2d1      	uxtb	r1, r2
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe45 	bl	8000234 <ssd1331_draw_point>
		for(j = 32; j < 80; j ++){ //x -> szerokość całego zapisu
 80005aa:	89bb      	ldrh	r3, [r7, #12]
 80005ac:	3301      	adds	r3, #1
 80005ae:	81bb      	strh	r3, [r7, #12]
 80005b0:	89bb      	ldrh	r3, [r7, #12]
 80005b2:	2b4f      	cmp	r3, #79	; 0x4f
 80005b4:	d9f1      	bls.n	800059a <ssd1331_clear_amp+0x16>
	for(i = 0; i < 15; i ++){ //y -> wysokość cyfry
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	3301      	adds	r3, #1
 80005ba:	81fb      	strh	r3, [r7, #14]
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	2b0e      	cmp	r3, #14
 80005c0:	d9e8      	bls.n	8000594 <ssd1331_clear_amp+0x10>
		}
	}
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ssd1331_clear_freq>:

void ssd1331_clear_freq(uint16_t hwColor)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b084      	sub	sp, #16
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 15; i < 30; i ++){
 80005d4:	230f      	movs	r3, #15
 80005d6:	81fb      	strh	r3, [r7, #14]
 80005d8:	e013      	b.n	8000602 <ssd1331_clear_freq+0x38>
		for(j = 40; j < 80; j ++){
 80005da:	2328      	movs	r3, #40	; 0x28
 80005dc:	81bb      	strh	r3, [r7, #12]
 80005de:	e00a      	b.n	80005f6 <ssd1331_clear_freq+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80005e0:	89bb      	ldrh	r3, [r7, #12]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	89fa      	ldrh	r2, [r7, #14]
 80005e6:	b2d1      	uxtb	r1, r2
 80005e8:	88fa      	ldrh	r2, [r7, #6]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fe22 	bl	8000234 <ssd1331_draw_point>
		for(j = 40; j < 80; j ++){
 80005f0:	89bb      	ldrh	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	81bb      	strh	r3, [r7, #12]
 80005f6:	89bb      	ldrh	r3, [r7, #12]
 80005f8:	2b4f      	cmp	r3, #79	; 0x4f
 80005fa:	d9f1      	bls.n	80005e0 <ssd1331_clear_freq+0x16>
	for(i = 15; i < 30; i ++){
 80005fc:	89fb      	ldrh	r3, [r7, #14]
 80005fe:	3301      	adds	r3, #1
 8000600:	81fb      	strh	r3, [r7, #14]
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	2b1d      	cmp	r3, #29
 8000606:	d9e8      	bls.n	80005da <ssd1331_clear_freq+0x10>
		}
	}
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <ssd1331_clear_multiply>:

void ssd1331_clear_multiply(uint16_t hwColor)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 30; i < 45; i ++){
 800061a:	231e      	movs	r3, #30
 800061c:	81fb      	strh	r3, [r7, #14]
 800061e:	e013      	b.n	8000648 <ssd1331_clear_multiply+0x38>
		for(j = 50; j < 60; j ++){
 8000620:	2332      	movs	r3, #50	; 0x32
 8000622:	81bb      	strh	r3, [r7, #12]
 8000624:	e00a      	b.n	800063c <ssd1331_clear_multiply+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	89fa      	ldrh	r2, [r7, #14]
 800062c:	b2d1      	uxtb	r1, r2
 800062e:	88fa      	ldrh	r2, [r7, #6]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdff 	bl	8000234 <ssd1331_draw_point>
		for(j = 50; j < 60; j ++){
 8000636:	89bb      	ldrh	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	81bb      	strh	r3, [r7, #12]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	2b3b      	cmp	r3, #59	; 0x3b
 8000640:	d9f1      	bls.n	8000626 <ssd1331_clear_multiply+0x16>
	for(i = 30; i < 45; i ++){
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	3301      	adds	r3, #1
 8000646:	81fb      	strh	r3, [r7, #14]
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	2b2c      	cmp	r3, #44	; 0x2c
 800064c:	d9e8      	bls.n	8000620 <ssd1331_clear_multiply+0x10>
		}
	}
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <ssd1331_clear_shape>:

void ssd1331_clear_shape(uint16_t hwColor)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 45; i < 60; i ++){
 8000660:	232d      	movs	r3, #45	; 0x2d
 8000662:	81fb      	strh	r3, [r7, #14]
 8000664:	e013      	b.n	800068e <ssd1331_clear_shape+0x38>
		for(j = 30; j < OLED_WIDTH; j ++){
 8000666:	231e      	movs	r3, #30
 8000668:	81bb      	strh	r3, [r7, #12]
 800066a:	e00a      	b.n	8000682 <ssd1331_clear_shape+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 800066c:	89bb      	ldrh	r3, [r7, #12]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	89fa      	ldrh	r2, [r7, #14]
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fddc 	bl	8000234 <ssd1331_draw_point>
		for(j = 30; j < OLED_WIDTH; j ++){
 800067c:	89bb      	ldrh	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	81bb      	strh	r3, [r7, #12]
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	2b5f      	cmp	r3, #95	; 0x5f
 8000686:	d9f1      	bls.n	800066c <ssd1331_clear_shape+0x16>
	for(i = 45; i < 60; i ++){
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	3301      	adds	r3, #1
 800068c:	81fb      	strh	r3, [r7, #14]
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	2b3b      	cmp	r3, #59	; 0x3b
 8000692:	d9e8      	bls.n	8000666 <ssd1331_clear_shape+0x10>
		}
	}
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <ssd1331_init>:
	}
}


void ssd1331_init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	__SSD1331_RES_SET();  //RES set
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4852      	ldr	r0, [pc, #328]	; (80007f0 <ssd1331_init+0x154>)
 80006a6:	f003 f81b 	bl	80036e0 <HAL_GPIO_WritePin>
	__SSD1331_CS_SET();
 80006aa:	2201      	movs	r2, #1
 80006ac:	2120      	movs	r1, #32
 80006ae:	4851      	ldr	r0, [pc, #324]	; (80007f4 <ssd1331_init+0x158>)
 80006b0:	f003 f816 	bl	80036e0 <HAL_GPIO_WritePin>
	
	ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 80006b4:	2100      	movs	r1, #0
 80006b6:	20ae      	movs	r0, #174	; 0xae
 80006b8:	f7ff fd86 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 80006bc:	2100      	movs	r1, #0
 80006be:	2081      	movs	r0, #129	; 0x81
 80006c0:	f7ff fd82 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 80006c4:	2100      	movs	r1, #0
 80006c6:	20ff      	movs	r0, #255	; 0xff
 80006c8:	f7ff fd7e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 80006cc:	2100      	movs	r1, #0
 80006ce:	2082      	movs	r0, #130	; 0x82
 80006d0:	f7ff fd7a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 80006d4:	2100      	movs	r1, #0
 80006d6:	20ff      	movs	r0, #255	; 0xff
 80006d8:	f7ff fd76 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 80006dc:	2100      	movs	r1, #0
 80006de:	2083      	movs	r0, #131	; 0x83
 80006e0:	f7ff fd72 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 80006e4:	2100      	movs	r1, #0
 80006e6:	20ff      	movs	r0, #255	; 0xff
 80006e8:	f7ff fd6e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 80006ec:	2100      	movs	r1, #0
 80006ee:	2087      	movs	r0, #135	; 0x87
 80006f0:	f7ff fd6a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 80006f4:	2100      	movs	r1, #0
 80006f6:	2006      	movs	r0, #6
 80006f8:	f7ff fd66 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 80006fc:	2100      	movs	r1, #0
 80006fe:	208a      	movs	r0, #138	; 0x8a
 8000700:	f7ff fd62 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000704:	2100      	movs	r1, #0
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f7ff fd5e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 800070c:	2100      	movs	r1, #0
 800070e:	208b      	movs	r0, #139	; 0x8b
 8000710:	f7ff fd5a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8000714:	2100      	movs	r1, #0
 8000716:	2078      	movs	r0, #120	; 0x78
 8000718:	f7ff fd56 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 800071c:	2100      	movs	r1, #0
 800071e:	208c      	movs	r0, #140	; 0x8c
 8000720:	f7ff fd52 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000724:	2100      	movs	r1, #0
 8000726:	2064      	movs	r0, #100	; 0x64
 8000728:	f7ff fd4e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 800072c:	2100      	movs	r1, #0
 800072e:	20a0      	movs	r0, #160	; 0xa0
 8000730:	f7ff fd4a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8000734:	2100      	movs	r1, #0
 8000736:	2072      	movs	r0, #114	; 0x72
 8000738:	f7ff fd46 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 800073c:	2100      	movs	r1, #0
 800073e:	20a1      	movs	r0, #161	; 0xa1
 8000740:	f7ff fd42 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8000744:	2100      	movs	r1, #0
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fd3e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 800074c:	2100      	movs	r1, #0
 800074e:	20a2      	movs	r0, #162	; 0xa2
 8000750:	f7ff fd3a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8000754:	2100      	movs	r1, #0
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fd36 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 800075c:	2100      	movs	r1, #0
 800075e:	20a4      	movs	r0, #164	; 0xa4
 8000760:	f7ff fd32 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8000764:	2100      	movs	r1, #0
 8000766:	20a8      	movs	r0, #168	; 0xa8
 8000768:	f7ff fd2e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x3F, SSD1331_CMD);
 800076c:	2100      	movs	r1, #0
 800076e:	203f      	movs	r0, #63	; 0x3f
 8000770:	f7ff fd2a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8000774:	2100      	movs	r1, #0
 8000776:	20ad      	movs	r0, #173	; 0xad
 8000778:	f7ff fd26 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x8E, SSD1331_CMD);
 800077c:	2100      	movs	r1, #0
 800077e:	208e      	movs	r0, #142	; 0x8e
 8000780:	f7ff fd22 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8000784:	2100      	movs	r1, #0
 8000786:	20b0      	movs	r0, #176	; 0xb0
 8000788:	f7ff fd1e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 800078c:	2100      	movs	r1, #0
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fd1a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8000794:	2100      	movs	r1, #0
 8000796:	20b1      	movs	r0, #177	; 0xb1
 8000798:	f7ff fd16 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 800079c:	2100      	movs	r1, #0
 800079e:	2031      	movs	r0, #49	; 0x31
 80007a0:	f7ff fd12 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 80007a4:	2100      	movs	r1, #0
 80007a6:	20b3      	movs	r0, #179	; 0xb3
 80007a8:	f7ff fd0e 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0xF0, SSD1331_CMD);
 80007ac:	2100      	movs	r1, #0
 80007ae:	20f0      	movs	r0, #240	; 0xf0
 80007b0:	f7ff fd0a 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 80007b4:	2100      	movs	r1, #0
 80007b6:	20bb      	movs	r0, #187	; 0xbb
 80007b8:	f7ff fd06 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x3A, SSD1331_CMD);
 80007bc:	2100      	movs	r1, #0
 80007be:	203a      	movs	r0, #58	; 0x3a
 80007c0:	f7ff fd02 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 80007c4:	2100      	movs	r1, #0
 80007c6:	20be      	movs	r0, #190	; 0xbe
 80007c8:	f7ff fcfe 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(0x3E, SSD1331_CMD);
 80007cc:	2100      	movs	r1, #0
 80007ce:	203e      	movs	r0, #62	; 0x3e
 80007d0:	f7ff fcfa 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 80007d4:	2100      	movs	r1, #0
 80007d6:	202e      	movs	r0, #46	; 0x2e
 80007d8:	f7ff fcf6 	bl	80001c8 <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 80007dc:	2100      	movs	r1, #0
 80007de:	20af      	movs	r0, #175	; 0xaf
 80007e0:	f7ff fcf2 	bl	80001c8 <ssd1331_write_byte>

    //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
    ssd1331_clear_screen(0x0000);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff feaa 	bl	800053e <ssd1331_clear_screen>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	48001000 	.word	0x48001000
 80007f4:	48000800 	.word	0x48000800

080007f8 <square_fill>:
		184,176,168,160,152,144,136,128,120,112,
		104,96,88,80,72,64,56,48,40,32,
		24,16,8,0};

void square_fill()
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
	for(int i = 0 ; i<1024; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	e012      	b.n	800082a <square_fill+0x32>
	{
		if(i<512){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800080a:	da06      	bge.n	800081a <square_fill+0x22>
			squareTable[i] = 0xfff; //4095
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <square_fill+0x48>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000814:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000818:	e004      	b.n	8000824 <square_fill+0x2c>
		}
		else
			squareTable[i] = 0;
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <square_fill+0x48>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2100      	movs	r1, #0
 8000820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i<1024; i++)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000830:	dbe8      	blt.n	8000804 <square_fill+0xc>
	}
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20001094 	.word	0x20001094

08000844 <find_max>:

int find_max(int a[], int n) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	int index = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]

	for (int d = 1; d < n; d++)
 8000852:	2301      	movs	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	e010      	b.n	800087a <find_max+0x36>
		    if (a[d] > a[index])
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	440b      	add	r3, r1
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	dd01      	ble.n	8000874 <find_max+0x30>
		      index = d;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60fb      	str	r3, [r7, #12]
	for (int d = 1; d < n; d++)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	dbea      	blt.n	8000858 <find_max+0x14>

	return index;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_GPIO_EXTI_Callback>:

//procedura obsługi przerwania dla przycisków od wybrania przebiegu oraz zmiany mnożnika częstotliwości
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af02      	add	r7, sp, #8
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == SWITCH_WAVEFORM_Pin){
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	2b80      	cmp	r3, #128	; 0x80
 800089e:	d174      	bne.n	800098a <HAL_GPIO_EXTI_Callback+0xfa>
			//generacja przebiegu sinusoidalnego
			if(waveformCounter == 0){
 80008a0:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d11e      	bne.n	80008e6 <HAL_GPIO_EXTI_Callback+0x56>
				ssd1331_clear_shape(BLACK);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fed4 	bl	8000656 <ssd1331_clear_shape>
				for (uint16_t i = 0; i < 1024; i++){
 80008ae:	2300      	movs	r3, #0
 80008b0:	82fb      	strh	r3, [r7, #22]
 80008b2:	e013      	b.n	80008dc <HAL_GPIO_EXTI_Callback+0x4c>
					switch_waveform_table[i] = sineTable[i];
 80008b4:	8afa      	ldrh	r2, [r7, #22]
 80008b6:	8afb      	ldrh	r3, [r7, #22]
 80008b8:	4973      	ldr	r1, [pc, #460]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80008ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008be:	4973      	ldr	r1, [pc, #460]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ssd1331_display_string(30, 45, (const uint8_t*)"SINE", FONT_1608, GREEN);
 80008c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2310      	movs	r3, #16
 80008cc:	4a70      	ldr	r2, [pc, #448]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x200>)
 80008ce:	212d      	movs	r1, #45	; 0x2d
 80008d0:	201e      	movs	r0, #30
 80008d2:	f7ff fdeb 	bl	80004ac <ssd1331_display_string>
				for (uint16_t i = 0; i < 1024; i++){
 80008d6:	8afb      	ldrh	r3, [r7, #22]
 80008d8:	3301      	adds	r3, #1
 80008da:	82fb      	strh	r3, [r7, #22]
 80008dc:	8afb      	ldrh	r3, [r7, #22]
 80008de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e2:	d3e7      	bcc.n	80008b4 <HAL_GPIO_EXTI_Callback+0x24>
 80008e4:	e044      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0xe0>
				}
			}
			//generacja przebiegu prostokątnego
			else if(waveformCounter == 1){
 80008e6:	4b67      	ldr	r3, [pc, #412]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d11e      	bne.n	800092c <HAL_GPIO_EXTI_Callback+0x9c>
				ssd1331_clear_shape(BLACK);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff feb1 	bl	8000656 <ssd1331_clear_shape>
				for (uint16_t i = 0; i < 1024; i++){
 80008f4:	2300      	movs	r3, #0
 80008f6:	82bb      	strh	r3, [r7, #20]
 80008f8:	e013      	b.n	8000922 <HAL_GPIO_EXTI_Callback+0x92>
					switch_waveform_table[i] = squareTable[i];
 80008fa:	8aba      	ldrh	r2, [r7, #20]
 80008fc:	8abb      	ldrh	r3, [r7, #20]
 80008fe:	4965      	ldr	r1, [pc, #404]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x204>)
 8000900:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000904:	4961      	ldr	r1, [pc, #388]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ssd1331_display_string(30, 45, (const uint8_t*)"SQUARE", FONT_1608, GREEN);
 800090a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2310      	movs	r3, #16
 8000912:	4a61      	ldr	r2, [pc, #388]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x208>)
 8000914:	212d      	movs	r1, #45	; 0x2d
 8000916:	201e      	movs	r0, #30
 8000918:	f7ff fdc8 	bl	80004ac <ssd1331_display_string>
				for (uint16_t i = 0; i < 1024; i++){
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	82bb      	strh	r3, [r7, #20]
 8000922:	8abb      	ldrh	r3, [r7, #20]
 8000924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000928:	d3e7      	bcc.n	80008fa <HAL_GPIO_EXTI_Callback+0x6a>
 800092a:	e021      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0xe0>
				}
			}
			//generacja przebiegu trójkątnego
			else if(waveformCounter == 2){
 800092c:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d11d      	bne.n	8000970 <HAL_GPIO_EXTI_Callback+0xe0>
				ssd1331_clear_shape(BLACK);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe8e 	bl	8000656 <ssd1331_clear_shape>
				for (uint16_t i = 0; i < 1024; i++){
 800093a:	2300      	movs	r3, #0
 800093c:	827b      	strh	r3, [r7, #18]
 800093e:	e013      	b.n	8000968 <HAL_GPIO_EXTI_Callback+0xd8>
					switch_waveform_table[i] = triangleTable[i];
 8000940:	8a7a      	ldrh	r2, [r7, #18]
 8000942:	8a7b      	ldrh	r3, [r7, #18]
 8000944:	4955      	ldr	r1, [pc, #340]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x20c>)
 8000946:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800094a:	4950      	ldr	r1, [pc, #320]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800094c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ssd1331_display_string(30, 45, (const uint8_t*)"TRIANGLE", FONT_1608, GREEN);
 8000950:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2310      	movs	r3, #16
 8000958:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x210>)
 800095a:	212d      	movs	r1, #45	; 0x2d
 800095c:	201e      	movs	r0, #30
 800095e:	f7ff fda5 	bl	80004ac <ssd1331_display_string>
				for (uint16_t i = 0; i < 1024; i++){
 8000962:	8a7b      	ldrh	r3, [r7, #18]
 8000964:	3301      	adds	r3, #1
 8000966:	827b      	strh	r3, [r7, #18]
 8000968:	8a7b      	ldrh	r3, [r7, #18]
 800096a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800096e:	d3e7      	bcc.n	8000940 <HAL_GPIO_EXTI_Callback+0xb0>
				}
			}

			waveformCounter++;
 8000970:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800097a:	701a      	strb	r2, [r3, #0]
			if(waveformCounter > 2){
 800097c:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d902      	bls.n	800098a <HAL_GPIO_EXTI_Callback+0xfa>
				waveformCounter = 0;
 8000984:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
			}
		}

		if(GPIO_Pin == SWITCH_MULTIPLY_Pin){
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000990:	f040 80bf 	bne.w	8000b12 <HAL_GPIO_EXTI_Callback+0x282>
			if(multiply == 0){
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d123      	bne.n	80009e4 <HAL_GPIO_EXTI_Callback+0x154>
				ssd1331_clear_freq(BLACK);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fe14 	bl	80005ca <ssd1331_clear_freq>
				ssd1331_clear_multiply(BLACK);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fe34 	bl	8000610 <ssd1331_clear_multiply>
				freq_change(multiply); //zmiana nastaw timera6 -> zmiana częstotliwości przebiegu
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f9c5 	bl	8000d3c <freq_change>
				ssd1331_display_num(40, 15, 1, 5, FONT_1608, GREEN);
 80009b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	2310      	movs	r3, #16
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2305      	movs	r3, #5
 80009be:	2201      	movs	r2, #1
 80009c0:	210f      	movs	r1, #15
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f7ff fcfc 	bl	80003c0 <ssd1331_display_num>
				ssd1331_display_num(50, 30, multiply, 1 , FONT_1608, GREEN);
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	2310      	movs	r3, #16
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	211e      	movs	r1, #30
 80009dc:	2032      	movs	r0, #50	; 0x32
 80009de:	f7ff fcef 	bl	80003c0 <ssd1331_display_num>
 80009e2:	e089      	b.n	8000af8 <HAL_GPIO_EXTI_Callback+0x268>
			}
			else if(multiply == 1){
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d123      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x1a4>
				ssd1331_clear_freq(BLACK);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fdec 	bl	80005ca <ssd1331_clear_freq>
				ssd1331_clear_multiply(BLACK);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fe0c 	bl	8000610 <ssd1331_clear_multiply>
				freq_change(multiply); //zmiana nastaw timera6 -> zmiana częstotliwości przebiegu
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f99d 	bl	8000d3c <freq_change>
				ssd1331_display_num(40, 15, 10, 5, FONT_1608, GREEN);
 8000a02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2310      	movs	r3, #16
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	220a      	movs	r2, #10
 8000a10:	210f      	movs	r1, #15
 8000a12:	2028      	movs	r0, #40	; 0x28
 8000a14:	f7ff fcd4 	bl	80003c0 <ssd1331_display_num>
				ssd1331_display_num(50, 30, multiply, 1 , FONT_1608, GREEN);
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	2310      	movs	r3, #16
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	211e      	movs	r1, #30
 8000a2c:	2032      	movs	r0, #50	; 0x32
 8000a2e:	f7ff fcc7 	bl	80003c0 <ssd1331_display_num>
 8000a32:	e061      	b.n	8000af8 <HAL_GPIO_EXTI_Callback+0x268>
			}
			else if(multiply == 2){
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d135      	bne.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x218>
				ssd1331_clear_freq(BLACK);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fdc4 	bl	80005ca <ssd1331_clear_freq>
				ssd1331_clear_multiply(BLACK);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fde4 	bl	8000610 <ssd1331_clear_multiply>
				freq_change(multiply); //zmiana nastaw timera6 -> zmiana częstotliwości przebiegu
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f975 	bl	8000d3c <freq_change>
				ssd1331_display_num(40, 15, 100, 5, FONT_1608, GREEN);
 8000a52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	2310      	movs	r3, #16
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	2264      	movs	r2, #100	; 0x64
 8000a60:	210f      	movs	r1, #15
 8000a62:	2028      	movs	r0, #40	; 0x28
 8000a64:	f7ff fcac 	bl	80003c0 <ssd1331_display_num>
				ssd1331_display_num(50, 30, multiply, 1 , FONT_1608, GREEN);
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	2310      	movs	r3, #16
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	211e      	movs	r1, #30
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f7ff fc9f 	bl	80003c0 <ssd1331_display_num>
 8000a82:	e039      	b.n	8000af8 <HAL_GPIO_EXTI_Callback+0x268>
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	08006770 	.word	0x08006770
 8000a8c:	20000050 	.word	0x20000050
 8000a90:	08005ccc 	.word	0x08005ccc
 8000a94:	20001094 	.word	0x20001094
 8000a98:	08005cd4 	.word	0x08005cd4
 8000a9c:	08007770 	.word	0x08007770
 8000aa0:	08005cdc 	.word	0x08005cdc
 8000aa4:	2000002d 	.word	0x2000002d
			}
			else if(multiply == 3){
 8000aa8:	4b94      	ldr	r3, [pc, #592]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d123      	bne.n	8000af8 <HAL_GPIO_EXTI_Callback+0x268>
				ssd1331_clear_freq(BLACK);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fd8a 	bl	80005ca <ssd1331_clear_freq>
				ssd1331_clear_multiply(BLACK);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fdaa 	bl	8000610 <ssd1331_clear_multiply>
				freq_change(multiply); //zmiana nastaw timera6 -> zmiana częstotliwości przebiegu
 8000abc:	4b8f      	ldr	r3, [pc, #572]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f93b 	bl	8000d3c <freq_change>
				ssd1331_display_num(40, 15, 1000, 5, FONT_1608, GREEN);
 8000ac6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	2310      	movs	r3, #16
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	2028      	movs	r0, #40	; 0x28
 8000ada:	f7ff fc71 	bl	80003c0 <ssd1331_display_num>
				ssd1331_display_num(50, 30, multiply, 1 , FONT_1608, GREEN);
 8000ade:	4b87      	ldr	r3, [pc, #540]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	2310      	movs	r3, #16
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	211e      	movs	r1, #30
 8000af2:	2032      	movs	r0, #50	; 0x32
 8000af4:	f7ff fc64 	bl	80003c0 <ssd1331_display_num>
			}
			multiply++;
 8000af8:	4b80      	ldr	r3, [pc, #512]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b7e      	ldr	r3, [pc, #504]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000b02:	701a      	strb	r2, [r3, #0]
			if(multiply == 4){
 8000b04:	4b7d      	ldr	r3, [pc, #500]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d102      	bne.n	8000b12 <HAL_GPIO_EXTI_Callback+0x282>
				multiply = 0;
 8000b0c:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x46c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
			}
		}
		if(GPIO_Pin == VOLTAGE_MEASURE_Pin){
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	f040 80ed 	bne.w	8000cf4 <HAL_GPIO_EXTI_Callback+0x464>
			ssd1331_clear_amp(BLACK);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fd32 	bl	8000584 <ssd1331_clear_amp>

			if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) { // Oczekiwanie na zakonczenie konwersji
 8000b20:	210a      	movs	r1, #10
 8000b22:	4877      	ldr	r0, [pc, #476]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x470>)
 8000b24:	f001 f9c6 	bl	8001eb4 <HAL_ADC_PollForConversion>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14a      	bne.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x334>
				adc_value = HAL_ADC_GetValue(&hadc1);// Pobranie zmierzonej wartosci
 8000b2e:	4874      	ldr	r0, [pc, #464]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x470>)
 8000b30:	f001 faba 	bl	80020a8 <HAL_ADC_GetValue>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x474>)
 8000b3a:	801a      	strh	r2, [r3, #0]
				voltage_conversion_num = (supply_voltage*adc_value)/adc_resolution;// Przeliczenie wartosci zmierzonej na napiecie
 8000b3c:	4b71      	ldr	r3, [pc, #452]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x474>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b48:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b50:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8000d08 <HAL_GPIO_EXTI_Callback+0x478>
 8000b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b58:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
				nearest = roundf(voltage_conversion_num * 100) / 100;
 8000b5e:	4b6b      	ldr	r3, [pc, #428]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000b60:	edd3 7a00 	vldr	s15, [r3]
 8000b64:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8000d10 <HAL_GPIO_EXTI_Callback+0x480>
 8000b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b70:	f005 f87a 	bl	8005c68 <roundf>
 8000b74:	eef0 6a40 	vmov.f32	s13, s0
 8000b78:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000d10 <HAL_GPIO_EXTI_Callback+0x480>
 8000b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b80:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x484>)
 8000b82:	edc3 7a00 	vstr	s15, [r3]
				voltage_conversion_denum = (uint16_t)(nearest*100) % 100;
 8000b86:	4b63      	ldr	r3, [pc, #396]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x484>)
 8000b88:	edd3 7a00 	vldr	s15, [r3]
 8000b8c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000d10 <HAL_GPIO_EXTI_Callback+0x480>
 8000b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b98:	ee17 3a90 	vmov	r3, s15
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4a5e      	ldr	r2, [pc, #376]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x488>)
 8000ba0:	fba2 1203 	umull	r1, r2, r2, r3
 8000ba4:	0952      	lsrs	r2, r2, #5
 8000ba6:	2164      	movs	r1, #100	; 0x64
 8000ba8:	fb01 f202 	mul.w	r2, r1, r2
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb8:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x48c>)
 8000bba:	edc3 7a00 	vstr	s15, [r3]
				HAL_ADC_Start(&hadc1);// Rozpoczecie nowej konwersji
 8000bbe:	4850      	ldr	r0, [pc, #320]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x470>)
 8000bc0:	f001 f862 	bl	8001c88 <HAL_ADC_Start>
			}

			adc_array_num[adc_counter] = voltage_conversion_num;
 8000bc4:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x490>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd4:	ee17 1a90 	vmov	r1, s15
 8000bd8:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x494>)
 8000bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			adc_array_denum[adc_counter] = voltage_conversion_denum;
 8000bde:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x48c>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x490>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bee:	ee17 1a90 	vmov	r1, s15
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x498>)
 8000bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			adc_counter++;
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x490>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x490>)
 8000c02:	701a      	strb	r2, [r3, #0]
			if(adc_counter == 10){
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x490>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b0a      	cmp	r3, #10
 8000c0a:	d173      	bne.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x464>
				adc_counter = 0;
 8000c0c:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x490>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]

				location = find_max(adc_array_num, size);
 8000c12:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x49c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4842      	ldr	r0, [pc, #264]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x494>)
 8000c1a:	f7ff fe13 	bl	8000844 <find_max>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	4b43      	ldr	r3, [pc, #268]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8000c22:	601a      	str	r2, [r3, #0]
				maximum_num  = adc_array_num[location];
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x494>)
 8000c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8000c38:	edc3 7a00 	vstr	s15, [r3]

				location = find_max(adc_array_denum, size);
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x49c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4839      	ldr	r0, [pc, #228]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x498>)
 8000c44:	f7ff fdfe 	bl	8000844 <find_max>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8000c4c:	601a      	str	r2, [r3, #0]
				maximum_denum  = adc_array_denum[location];
 8000c4e:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x498>)
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]

				ssd1331_display_num(32, 0, maximum_num, 2 , FONT_1608, GREEN);
 8000c66:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	2310      	movs	r3, #16
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	ee17 2a90 	vmov	r2, s15
 8000c80:	2100      	movs	r1, #0
 8000c82:	2020      	movs	r0, #32
 8000c84:	f7ff fb9c 	bl	80003c0 <ssd1331_display_num>
				ssd1331_display_char(48, 0, '.', FONT_1608, GREEN);
 8000c88:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2310      	movs	r3, #16
 8000c90:	222e      	movs	r2, #46	; 0x2e
 8000c92:	2100      	movs	r1, #0
 8000c94:	2030      	movs	r0, #48	; 0x30
 8000c96:	f7ff fb09 	bl	80002ac <ssd1331_display_char>
				ssd1331_display_num(51, 0, maximum_denum, 2 , FONT_1608, GREEN);
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8000c9c:	edd3 7a00 	vldr	s15, [r3]
 8000ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2310      	movs	r3, #16
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	ee17 2a90 	vmov	r2, s15
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2033      	movs	r0, #51	; 0x33
 8000cb8:	f7ff fb82 	bl	80003c0 <ssd1331_display_num>
				ssd1331_display_char(70, 0, 'V', FONT_1608, GREEN);
 8000cbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	2256      	movs	r2, #86	; 0x56
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2046      	movs	r0, #70	; 0x46
 8000cca:	f7ff faef 	bl	80002ac <ssd1331_display_char>

				for(int i=0; i<10; i++){
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e00c      	b.n	8000cee <HAL_GPIO_EXTI_Callback+0x45e>
					adc_array_num[i] = 0;
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x494>)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					adc_array_denum[i] = 0;
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x498>)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0; i<10; i++){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	ddef      	ble.n	8000cd4 <HAL_GPIO_EXTI_Callback+0x444>
				}

			}
		}

}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000002d 	.word	0x2000002d
 8000d00:	200020bc 	.word	0x200020bc
 8000d04:	2000002e 	.word	0x2000002e
 8000d08:	457ff000 	.word	0x457ff000
 8000d0c:	20000030 	.word	0x20000030
 8000d10:	42c80000 	.word	0x42c80000
 8000d14:	20000040 	.word	0x20000040
 8000d18:	51eb851f 	.word	0x51eb851f
 8000d1c:	20000034 	.word	0x20000034
 8000d20:	20000044 	.word	0x20000044
 8000d24:	20002094 	.word	0x20002094
 8000d28:	20002170 	.word	0x20002170
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000048 	.word	0x20000048
 8000d34:	20000038 	.word	0x20000038
 8000d38:	2000003c 	.word	0x2000003c

08000d3c <freq_change>:

void freq_change(uint8_t multiply)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	switch (multiply)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d835      	bhi.n	8000db8 <freq_change+0x7c>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <freq_change+0x18>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d7b 	.word	0x08000d7b
 8000d5c:	08000d91 	.word	0x08000d91
 8000d60:	08000da5 	.word	0x08000da5
	{
	case 0: //1 Hz
		TIM6->PSC = 6;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <freq_change+0x8c>)
 8000d66:	2206      	movs	r2, #6
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
		TIM6->ARR = 10085;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <freq_change+0x8c>)
 8000d6c:	f242 7265 	movw	r2, #10085	; 0x2765
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM6->CNT = 0;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <freq_change+0x8c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000d78:	e01f      	b.n	8000dba <freq_change+0x7e>
	case 1: //10 Hz
		TIM6->PSC = 7;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <freq_change+0x8c>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
		TIM6->ARR = 878;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <freq_change+0x8c>)
 8000d82:	f240 326e 	movw	r2, #878	; 0x36e
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM6->CNT = 0;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <freq_change+0x8c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000d8e:	e014      	b.n	8000dba <freq_change+0x7e>
	case 2: //100 Hz
		TIM6->PSC = 7;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <freq_change+0x8c>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
		TIM6->ARR = 87;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <freq_change+0x8c>)
 8000d98:	2257      	movs	r2, #87	; 0x57
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM6->CNT = 0;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <freq_change+0x8c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000da2:	e00a      	b.n	8000dba <freq_change+0x7e>
	case 3: //1000 Hz
		TIM6->PSC = 6;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <freq_change+0x8c>)
 8000da6:	2206      	movs	r2, #6
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
		TIM6->ARR = 9;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <freq_change+0x8c>)
 8000dac:	2209      	movs	r2, #9
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM6->CNT = 0;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <freq_change+0x8c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000db6:	e000      	b.n	8000dba <freq_change+0x7e>
	default:
		break;
 8000db8:	bf00      	nop
	}
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40001000 	.word	0x40001000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fd13 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f865 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 fa11 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dde:	f000 f9f1 	bl	80011c4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000de2:	f000 f959 	bl	8001098 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000de6:	f000 f9cb 	bl	8001180 <MX_USB_PCD_Init>
  MX_DAC_Init();
 8000dea:	f000 f92b 	bl	8001044 <MX_DAC_Init>
  MX_TIM6_Init();
 8000dee:	f000 f991 	bl	8001114 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000df2:	f000 f8b7 	bl	8000f64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  square_fill();
 8000df6:	f7ff fcff 	bl	80007f8 <square_fill>

  HAL_TIM_Base_Start(&htim6); //uruchomienie timer6 od DAC
 8000dfa:	4821      	ldr	r0, [pc, #132]	; (8000e80 <main+0xb4>)
 8000dfc:	f004 fbea 	bl	80055d4 <HAL_TIM_Base_Start>

  ssd1331_init();
 8000e00:	f7ff fc4c 	bl	800069c <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fb9a 	bl	800053e <ssd1331_clear_screen>
  ssd1331_display_string(0, 0, (const uint8_t*)"VPP: ", FONT_1608, GREEN);
 8000e0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2310      	movs	r3, #16
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <main+0xb8>)
 8000e14:	2100      	movs	r1, #0
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fb48 	bl	80004ac <ssd1331_display_string>
  ssd1331_display_string(0, 15, (const uint8_t*)"FREQ: ", FONT_1608, GREEN);
 8000e1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2310      	movs	r3, #16
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <main+0xbc>)
 8000e26:	210f      	movs	r1, #15
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fb3f 	bl	80004ac <ssd1331_display_string>
  ssd1331_display_string(0, 30, (const uint8_t*)"MUL: ", FONT_1608, GREEN);
 8000e2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2310      	movs	r3, #16
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <main+0xc0>)
 8000e38:	211e      	movs	r1, #30
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fb36 	bl	80004ac <ssd1331_display_string>
  ssd1331_display_string(0, 45, (const uint8_t*)"SW: ", FONT_1608, GREEN);
 8000e40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2310      	movs	r3, #16
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <main+0xc4>)
 8000e4a:	212d      	movs	r1, #45	; 0x2d
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fb2d 	bl	80004ac <ssd1331_display_string>
  ssd1331_display_string(80, 15, (const uint8_t*)"Hz ", FONT_1608, GREEN);
 8000e52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2310      	movs	r3, #16
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <main+0xc8>)
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	2050      	movs	r0, #80	; 0x50
 8000e60:	f7ff fb24 	bl	80004ac <ssd1331_display_string>

  HAL_ADC_Start(&hadc1);
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <main+0xcc>)
 8000e66:	f000 ff0f 	bl	8001c88 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)switch_waveform_table, 1023, DAC_ALIGN_12B_R); //generacja określonego przebiegu o określonej częstotliwości
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <main+0xd0>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <main+0xd4>)
 8000e78:	f001 ff1c 	bl	8002cb4 <HAL_DAC_Start_DMA>
 8000e7c:	e7f5      	b.n	8000e6a <main+0x9e>
 8000e7e:	bf00      	nop
 8000e80:	20002124 	.word	0x20002124
 8000e84:	08005ce8 	.word	0x08005ce8
 8000e88:	08005cf0 	.word	0x08005cf0
 8000e8c:	08005cf8 	.word	0x08005cf8
 8000e90:	08005d00 	.word	0x08005d00
 8000e94:	08005d08 	.word	0x08005d08
 8000e98:	200020bc 	.word	0x200020bc
 8000e9c:	20000050 	.word	0x20000050
 8000ea0:	20002110 	.word	0x20002110

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09e      	sub	sp, #120	; 0x78
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fed0 	bl	8005c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	223c      	movs	r2, #60	; 0x3c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fec2 	bl	8005c58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ef4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fcfe 	bl	80038fc <HAL_RCC_OscConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f06:	f000 fa59 	bl	80013bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f24:	2102      	movs	r1, #2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fbf0 	bl	800470c <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f32:	f000 fa43 	bl	80013bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SystemClock_Config+0xbc>)
 8000f38:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fdc6 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f52:	f000 fa33 	bl	80013bc <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3778      	adds	r7, #120	; 0x78
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	00020080 	.word	0x00020080

08000f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000f88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	4817      	ldr	r0, [pc, #92]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000fe2:	f000 fc71 	bl	80018c8 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f000 f9e6 	bl	80013bc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <MX_ADC1_Init+0xdc>)
 8000ffc:	f001 fb4e 	bl	800269c <HAL_ADCEx_MultiModeConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001006:	f000 f9d9 	bl	80013bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800100a:	2303      	movs	r3, #3
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_ADC1_Init+0xdc>)
 8001028:	f001 f84c 	bl	80020c4 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001032:	f000 f9c3 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200020bc 	.word	0x200020bc

08001044 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_DAC_Init+0x4c>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <MX_DAC_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_DAC_Init+0x4c>)
 800105c:	f001 fddf 	bl	8002c1e <HAL_DAC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001066:	f000 f9a9 	bl	80013bc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800106a:	2304      	movs	r3, #4
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_DAC_Init+0x4c>)
 800107a:	f001 ff23 	bl	8002ec4 <HAL_DAC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001084:	f000 f99a 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20002110 	.word	0x20002110
 8001094:	40007400 	.word	0x40007400

08001098 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_SPI1_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_SPI1_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_SPI1_Init+0x74>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_SPI1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_SPI1_Init+0x74>)
 80010b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_SPI1_Init+0x74>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_SPI1_Init+0x74>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_SPI1_Init+0x74>)
 80010c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_SPI1_Init+0x74>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_SPI1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_SPI1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_SPI1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_SPI1_Init+0x74>)
 80010e6:	2207      	movs	r2, #7
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_SPI1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_SPI1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_SPI1_Init+0x74>)
 80010f8:	f003 fe9e 	bl	8004e38 <HAL_SPI_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 f95b 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000219c 	.word	0x2000219c
 8001110:	40013000 	.word	0x40013000

08001114 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_TIM6_Init+0x64>)
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <MX_TIM6_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_TIM6_Init+0x64>)
 800112c:	2247      	movs	r2, #71	; 0x47
 800112e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_TIM6_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_TIM6_Init+0x64>)
 8001138:	2209      	movs	r2, #9
 800113a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_TIM6_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_TIM6_Init+0x64>)
 8001144:	f004 f9ee 	bl	8005524 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800114e:	f000 f935 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001152:	2320      	movs	r3, #32
 8001154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_TIM6_Init+0x64>)
 8001160:	f004 fc7c 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800116a:	f000 f927 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20002124 	.word	0x20002124
 800117c:	40001000 	.word	0x40001000

08001180 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <MX_USB_PCD_Init+0x40>)
 8001188:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 800118c:	2208      	movs	r2, #8
 800118e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 8001192:	2202      	movs	r2, #2
 8001194:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 8001198:	2202      	movs	r2, #2
 800119a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_USB_PCD_Init+0x3c>)
 80011aa:	f002 fac9 	bl	8003740 <HAL_PCD_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011b4:	f000 f902 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20002200 	.word	0x20002200
 80011c0:	40005c00 	.word	0x40005c00

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_DMA_Init+0x38>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <MX_DMA_Init+0x38>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_DMA_Init+0x38>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	200d      	movs	r0, #13
 80011e8:	f001 fce3 	bl	8002bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011ec:	200d      	movs	r0, #13
 80011ee:	f001 fcfc 	bl	8002bea <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a63      	ldr	r2, [pc, #396]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 800121c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b61      	ldr	r3, [pc, #388]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a5d      	ldr	r2, [pc, #372]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 800127c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001280:	6153      	str	r3, [r2, #20]
 8001282:	4b49      	ldr	r3, [pc, #292]	; (80013a8 <MX_GPIO_Init+0x1a8>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2120      	movs	r1, #32
 8001292:	4846      	ldr	r0, [pc, #280]	; (80013ac <MX_GPIO_Init+0x1ac>)
 8001294:	f002 fa24 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2102      	movs	r1, #2
 800129c:	4844      	ldr	r0, [pc, #272]	; (80013b0 <MX_GPIO_Init+0x1b0>)
 800129e:	f002 fa1f 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	4843      	ldr	r0, [pc, #268]	; (80013b4 <MX_GPIO_Init+0x1b4>)
 80012a8:	f002 fa1a 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VOLTAGE_MEASURE_Pin SWITCH_MULTIPLY_Pin */
  GPIO_InitStruct.Pin = VOLTAGE_MEASURE_Pin|SWITCH_MULTIPLY_Pin;
 80012ac:	f240 4301 	movw	r3, #1025	; 0x401
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <MX_GPIO_Init+0x1b8>)
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f002 f892 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80012c8:	2320      	movs	r3, #32
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4833      	ldr	r0, [pc, #204]	; (80013ac <MX_GPIO_Init+0x1ac>)
 80012e0:	f002 f884 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	482d      	ldr	r0, [pc, #180]	; (80013b0 <MX_GPIO_Init+0x1b0>)
 80012fc:	f002 f876 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_Pin */
  GPIO_InitStruct.Pin = RES_Pin;
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <MX_GPIO_Init+0x1b4>)
 8001318:	f002 f868 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800131c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800132e:	2302      	movs	r3, #2
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	481e      	ldr	r0, [pc, #120]	; (80013b4 <MX_GPIO_Init+0x1b4>)
 800133a:	f002 f857 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <MX_GPIO_Init+0x1b4>)
 8001354:	f002 f84a 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_WAVEFORM_Pin */
  GPIO_InitStruct.Pin = SWITCH_WAVEFORM_Pin;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_GPIO_Init+0x1b8>)
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_WAVEFORM_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <MX_GPIO_Init+0x1b0>)
 800136c:	f002 f83e 	bl	80033ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2006      	movs	r0, #6
 8001376:	f001 fc1c 	bl	8002bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800137a:	2006      	movs	r0, #6
 800137c:	f001 fc35 	bl	8002bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2017      	movs	r0, #23
 8001386:	f001 fc14 	bl	8002bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800138a:	2017      	movs	r0, #23
 800138c:	f001 fc2d 	bl	8002bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2028      	movs	r0, #40	; 0x28
 8001396:	f001 fc0c 	bl	8002bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139a:	2028      	movs	r0, #40	; 0x28
 800139c:	f001 fc25 	bl	8002bea <HAL_NVIC_EnableIRQ>

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48001000 	.word	0x48001000
 80013b8:	10210000 	.word	0x10210000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <Error_Handler+0x6>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fa:	2007      	movs	r0, #7
 80013fc:	f001 fbce 	bl	8002b9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800142c:	d124      	bne.n	8001478 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_ADC_MspInit+0x74>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <HAL_ADC_MspInit+0x74>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6153      	str	r3, [r2, #20]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_ADC_MspInit+0x74>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_ADC_MspInit+0x74>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_ADC_MspInit+0x74>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_ADC_MspInit+0x74>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145e:	2304      	movs	r3, #4
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001462:	2303      	movs	r3, #3
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f001 ffba 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_DAC_MspInit+0xe0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d15a      	bne.n	800155c <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <HAL_DAC_MspInit+0xe4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <HAL_DAC_MspInit+0xe4>)
 80014ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_DAC_MspInit+0xe4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_DAC_MspInit+0xe4>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_DAC_MspInit+0xe4>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_DAC_MspInit+0xe4>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d6:	2310      	movs	r3, #16
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014da:	2303      	movs	r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f001 ff7e 	bl	80033ec <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_DAC_MspInit+0xe8>)
 80014f2:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <HAL_DAC_MspInit+0xec>)
 80014f4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_DAC_MspInit+0xe8>)
 80014f8:	2210      	movs	r2, #16
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_DAC_MspInit+0xe8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_DAC_MspInit+0xe8>)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_DAC_MspInit+0xe8>)
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_DAC_MspInit+0xe8>)
 8001512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001516:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_DAC_MspInit+0xe8>)
 800151a:	2220      	movs	r2, #32
 800151c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_DAC_MspInit+0xe8>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <HAL_DAC_MspInit+0xe8>)
 8001526:	f001 fdae 	bl	8003086 <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001530:	f7ff ff44 	bl	80013bc <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_DAC_MspInit+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_DAC_MspInit+0xf0>)
 800153a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800153e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_DAC_MspInit+0xe8>)
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_DAC_MspInit+0xe8>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2036      	movs	r0, #54	; 0x36
 8001552:	f001 fb2e 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001556:	2036      	movs	r0, #54	; 0x36
 8001558:	f001 fb47 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40007400 	.word	0x40007400
 8001568:	40021000 	.word	0x40021000
 800156c:	20001050 	.word	0x20001050
 8001570:	40020030 	.word	0x40020030
 8001574:	40010000 	.word	0x40010000

08001578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_SPI_MspInit+0x7c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d128      	bne.n	80015ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_SPI_MspInit+0x80>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <HAL_SPI_MspInit+0x80>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_SPI_MspInit+0x80>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_SPI_MspInit+0x80>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_SPI_MspInit+0x80>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_SPI_MspInit+0x80>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80015ca:	23e0      	movs	r3, #224	; 0xe0
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015da:	2305      	movs	r3, #5
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 ff00 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40013000 	.word	0x40013000
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_TIM_Base_MspInit+0x44>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d113      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2036      	movs	r0, #54	; 0x36
 800162c:	f001 fac1 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001630:	2036      	movs	r0, #54	; 0x36
 8001632:	f001 fada 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40001000 	.word	0x40001000
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_PCD_MspInit+0x80>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d129      	bne.n	80016be <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_PCD_MspInit+0x84>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_PCD_MspInit+0x84>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_PCD_MspInit+0x84>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001682:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001694:	230e      	movs	r3, #14
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f001 fea3 	bl	80033ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_PCD_MspInit+0x84>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_PCD_MspInit+0x84>)
 80016ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_PCD_MspInit+0x84>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40005c00 	.word	0x40005c00
 80016cc:	40021000 	.word	0x40021000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f8b4 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001728:	2001      	movs	r0, #1
 800172a:	f001 fff1 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Channel3_IRQHandler+0x10>)
 800173a:	f001 fd4a 	bl	80031d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20001050 	.word	0x20001050

08001748 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800174c:	2080      	movs	r0, #128	; 0x80
 800174e:	f001 ffdf 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800175a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800175e:	f001 ffd7 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <TIM6_DAC_IRQHandler+0x14>)
 800176e:	f003 ff93 	bl	8005698 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <TIM6_DAC_IRQHandler+0x18>)
 8001774:	f001 fb4c 	bl	8002e10 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20002124 	.word	0x20002124
 8001780:	20002110 	.word	0x20002110

08001784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f004 fa1b 	bl	8005c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017da:	f7ff faf7 	bl	8000dcc <main>

080017de <LoopForever>:

LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017ec:	080087a8 	.word	0x080087a8
  ldr r2, =_sbss
 80017f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017f4:	200024f0 	.word	0x200024f0

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>
	...

080017fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x28>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x28>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f001 f9c5 	bl	8002b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fdd4 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f001 f9dd 	bl	8002c06 <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f001 f9a5 	bl	8002bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000004 	.word	0x20000004
 8001880:	2000000c 	.word	0x2000000c
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	200024ec 	.word	0x200024ec

080018b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	200024ec 	.word	0x200024ec

080018c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09a      	sub	sp, #104	; 0x68
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e1c9      	b.n	8001c7c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d176      	bne.n	80019e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d152      	bne.n	80019a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fd75 	bl	800140c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d13b      	bne.n	80019a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f001 f803 	bl	800293c <ADC_Disable>
 8001936:	4603      	mov	r3, r0
 8001938:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d12f      	bne.n	80019a8 <HAL_ADC_Init+0xe0>
 8001948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800194c:	2b00      	cmp	r3, #0
 800194e:	d12b      	bne.n	80019a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001958:	f023 0302 	bic.w	r3, r3, #2
 800195c:	f043 0202 	orr.w	r2, r3, #2
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001972:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001982:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001984:	4b86      	ldr	r3, [pc, #536]	; (8001ba0 <HAL_ADC_Init+0x2d8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a86      	ldr	r2, [pc, #536]	; (8001ba4 <HAL_ADC_Init+0x2dc>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9a      	lsrs	r2, r3, #18
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800199a:	e002      	b.n	80019a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f9      	bne.n	800199c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80019c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019c4:	d110      	bne.n	80019e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f023 0312 	bic.w	r3, r3, #18
 80019ce:	f043 0210 	orr.w	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8136 	bne.w	8001c62 <HAL_ADC_Init+0x39a>
 80019f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8131 	bne.w	8001c62 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8129 	bne.w	8001c62 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a18:	f043 0202 	orr.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a28:	d004      	beq.n	8001a34 <HAL_ADC_Init+0x16c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ba8 <HAL_ADC_Init+0x2e0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_Init+0x170>
 8001a34:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_ADC_Init+0x2e4>)
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_Init+0x172>
 8001a38:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_ADC_Init+0x2e8>)
 8001a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a44:	d102      	bne.n	8001a4c <HAL_ADC_Init+0x184>
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <HAL_ADC_Init+0x2e0>)
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e01a      	b.n	8001a82 <HAL_ADC_Init+0x1ba>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_ADC_Init+0x2e0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d103      	bne.n	8001a5e <HAL_ADC_Init+0x196>
 8001a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e011      	b.n	8001a82 <HAL_ADC_Init+0x1ba>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_ADC_Init+0x2ec>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d102      	bne.n	8001a6e <HAL_ADC_Init+0x1a6>
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_ADC_Init+0x2f0>)
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e009      	b.n	8001a82 <HAL_ADC_Init+0x1ba>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_ADC_Init+0x2f0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d102      	bne.n	8001a7e <HAL_ADC_Init+0x1b6>
 8001a78:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <HAL_ADC_Init+0x2ec>)
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e001      	b.n	8001a82 <HAL_ADC_Init+0x1ba>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d108      	bne.n	8001aa2 <HAL_ADC_Init+0x1da>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Init+0x1da>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_ADC_Init+0x1dc>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11c      	bne.n	8001ae2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_ADC_Init+0x202>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x202>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_Init+0x204>
 8001aca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d108      	bne.n	8001ae2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7e5b      	ldrb	r3, [r3, #25]
 8001ae6:	035b      	lsls	r3, r3, #13
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aec:	2a01      	cmp	r2, #1
 8001aee:	d002      	beq.n	8001af6 <HAL_ADC_Init+0x22e>
 8001af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af4:	e000      	b.n	8001af8 <HAL_ADC_Init+0x230>
 8001af6:	2200      	movs	r2, #0
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d11b      	bne.n	8001b4e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e5b      	ldrb	r3, [r3, #25]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	3b01      	subs	r3, #1
 8001b24:	045a      	lsls	r2, r3, #17
 8001b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b30:	e00d      	b.n	8001b4e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001b3a:	f043 0220 	orr.w	r2, r3, #32
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d03a      	beq.n	8001bcc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_ADC_Init+0x2ec>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d004      	beq.n	8001b6a <HAL_ADC_Init+0x2a2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_ADC_Init+0x2f0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d128      	bne.n	8001bbc <HAL_ADC_Init+0x2f4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001b72:	d012      	beq.n	8001b9a <HAL_ADC_Init+0x2d2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7c:	d00a      	beq.n	8001b94 <HAL_ADC_Init+0x2cc>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001b86:	d002      	beq.n	8001b8e <HAL_ADC_Init+0x2c6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	e018      	b.n	8001bc0 <HAL_ADC_Init+0x2f8>
 8001b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b92:	e015      	b.n	8001bc0 <HAL_ADC_Init+0x2f8>
 8001b94:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001b98:	e012      	b.n	8001bc0 <HAL_ADC_Init+0x2f8>
 8001b9a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b9e:	e00f      	b.n	8001bc0 <HAL_ADC_Init+0x2f8>
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	50000100 	.word	0x50000100
 8001bac:	50000300 	.word	0x50000300
 8001bb0:	50000700 	.word	0x50000700
 8001bb4:	50000400 	.word	0x50000400
 8001bb8:	50000500 	.word	0x50000500
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d114      	bne.n	8001c04 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be8:	f023 0302 	bic.w	r3, r3, #2
 8001bec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e1b      	ldrb	r3, [r3, #24]
 8001bf2:	039a      	lsls	r2, r3, #14
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c00:	4313      	orrs	r3, r2
 8001c02:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_ADC_Init+0x3bc>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c14:	430b      	orrs	r3, r1
 8001c16:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10c      	bne.n	8001c3a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f023 010f 	bic.w	r1, r3, #15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
 8001c38:	e007      	b.n	8001c4a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 020f 	bic.w	r2, r2, #15
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f023 0303 	bic.w	r3, r3, #3
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c60:	e00a      	b.n	8001c78 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f023 0312 	bic.w	r3, r3, #18
 8001c6a:	f043 0210 	orr.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3768      	adds	r7, #104	; 0x68
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	fff0c007 	.word	0xfff0c007

08001c88 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80f9 	bne.w	8001e96 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Start+0x2a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0f4      	b.n	8001e9c <HAL_ADC_Start+0x214>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fde0 	bl	8002880 <ADC_Enable>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 80e0 	bne.w	8001e8c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce8:	d004      	beq.n	8001cf4 <HAL_ADC_Start+0x6c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6d      	ldr	r2, [pc, #436]	; (8001ea4 <HAL_ADC_Start+0x21c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d106      	bne.n	8001d02 <HAL_ADC_Start+0x7a>
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <HAL_ADC_Start+0x220>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_ADC_Start+0x9a>
 8001d00:	e005      	b.n	8001d0e <HAL_ADC_Start+0x86>
 8001d02:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_ADC_Start+0x224>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_ADC_Start+0x9a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Start+0x9a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a64      	ldr	r2, [pc, #400]	; (8001eb0 <HAL_ADC_Start+0x228>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d115      	bne.n	8001d4e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d036      	beq.n	8001daa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d4c:	e02d      	b.n	8001daa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d62:	d004      	beq.n	8001d6e <HAL_ADC_Start+0xe6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <HAL_ADC_Start+0x21c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10a      	bne.n	8001d84 <HAL_ADC_Start+0xfc>
 8001d6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e008      	b.n	8001d96 <HAL_ADC_Start+0x10e>
 8001d84:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_ADC_Start+0x228>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db6:	d106      	bne.n	8001dc6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f023 0206 	bic.w	r2, r3, #6
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	221c      	movs	r2, #28
 8001dda:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_Start+0x168>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <HAL_ADC_Start+0x21c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_Start+0x176>
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_ADC_Start+0x220>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d03e      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001dfc:	e005      	b.n	8001e0a <HAL_ADC_Start+0x182>
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_ADC_Start+0x224>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d037      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e12:	d004      	beq.n	8001e1e <HAL_ADC_Start+0x196>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_ADC_Start+0x21c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d106      	bne.n	8001e2c <HAL_ADC_Start+0x1a4>
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_ADC_Start+0x220>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d027      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001e2a:	e005      	b.n	8001e38 <HAL_ADC_Start+0x1b0>
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_ADC_Start+0x224>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d020      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e40:	d004      	beq.n	8001e4c <HAL_ADC_Start+0x1c4>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_ADC_Start+0x21c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_Start+0x1d2>
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_ADC_Start+0x220>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d010      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001e58:	e005      	b.n	8001e66 <HAL_ADC_Start+0x1de>
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_ADC_Start+0x224>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d009      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_Start+0x1f2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_ADC_Start+0x228>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10f      	bne.n	8001e9a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0204 	orr.w	r2, r2, #4
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	e006      	b.n	8001e9a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e94:	e001      	b.n	8001e9a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	50000100 	.word	0x50000100
 8001ea8:	50000300 	.word	0x50000300
 8001eac:	50000700 	.word	0x50000700
 8001eb0:	50000400 	.word	0x50000400

08001eb4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d102      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001eca:	2308      	movs	r3, #8
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e03a      	b.n	8001f46 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_PollForConversion+0x30>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_ADC_PollForConversion+0x1e4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x34>
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_ADC_PollForConversion+0x1e8>)
 8001ee6:	e000      	b.n	8001eea <HAL_ADC_PollForConversion+0x36>
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_ADC_PollForConversion+0x1ec>)
 8001eea:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d112      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d11d      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0b8      	b.n	8002090 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f043 0220 	orr.w	r2, r3, #32
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0a6      	b.n	8002090 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f42:	230c      	movs	r3, #12
 8001f44:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_PollForConversion+0xa6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_ADC_PollForConversion+0x1e4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d106      	bne.n	8001f68 <HAL_ADC_PollForConversion+0xb4>
 8001f5a:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_ADC_PollForConversion+0x1e8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_ADC_PollForConversion+0xd4>
 8001f66:	e005      	b.n	8001f74 <HAL_ADC_PollForConversion+0xc0>
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_ADC_PollForConversion+0x1ec>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <HAL_ADC_PollForConversion+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f7c:	d004      	beq.n	8001f88 <HAL_ADC_PollForConversion+0xd4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_ADC_PollForConversion+0x1f0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d104      	bne.n	8001f92 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e00f      	b.n	8001fb2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f9a:	d004      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0xf2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3d      	ldr	r2, [pc, #244]	; (8002098 <HAL_ADC_PollForConversion+0x1e4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d102      	bne.n	8001fac <HAL_ADC_PollForConversion+0xf8>
 8001fa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001faa:	e000      	b.n	8001fae <HAL_ADC_PollForConversion+0xfa>
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_ADC_PollForConversion+0x1f0>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001fb2:	f7ff fc7d 	bl	80018b0 <HAL_GetTick>
 8001fb6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fb8:	e01a      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d016      	beq.n	8001ff0 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0x124>
 8001fc8:	f7ff fc72 	bl	80018b0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d20b      	bcs.n	8001ff0 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0204 	orr.w	r2, r3, #4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e04f      	b.n	8002090 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0dd      	beq.n	8001fba <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002014:	2b00      	cmp	r3, #0
 8002016:	d131      	bne.n	800207c <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800201e:	2b00      	cmp	r3, #0
 8002020:	d12c      	bne.n	800207c <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b08      	cmp	r3, #8
 800202e:	d125      	bne.n	800207c <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d112      	bne.n	8002064 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d112      	bne.n	800207c <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
 8002062:	e00b      	b.n	800207c <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	50000100 	.word	0x50000100
 800209c:	50000300 	.word	0x50000300
 80020a0:	50000700 	.word	0x50000700
 80020a4:	50000400 	.word	0x50000400

080020a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b09b      	sub	sp, #108	; 0x6c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x22>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e2cb      	b.n	800267e <HAL_ADC_ConfigChannel+0x5ba>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 82af 	bne.w	800265c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d81c      	bhi.n	8002140 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	461a      	mov	r2, r3
 800211a:	231f      	movs	r3, #31
 800211c:	4093      	lsls	r3, r2
 800211e:	43db      	mvns	r3, r3
 8002120:	4019      	ands	r1, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa00 f203 	lsl.w	r2, r0, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
 800213e:	e063      	b.n	8002208 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b09      	cmp	r3, #9
 8002146:	d81e      	bhi.n	8002186 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	3b1e      	subs	r3, #30
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	4019      	ands	r1, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	3b1e      	subs	r3, #30
 8002178:	fa00 f203 	lsl.w	r2, r0, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	635a      	str	r2, [r3, #52]	; 0x34
 8002184:	e040      	b.n	8002208 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b0e      	cmp	r3, #14
 800218c:	d81e      	bhi.n	80021cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	3b3c      	subs	r3, #60	; 0x3c
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	3b3c      	subs	r3, #60	; 0x3c
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38
 80021ca:	e01d      	b.n	8002208 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	3b5a      	subs	r3, #90	; 0x5a
 80021e0:	221f      	movs	r2, #31
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	4019      	ands	r1, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	3b5a      	subs	r3, #90	; 0x5a
 80021fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 80e5 	bne.w	80023e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d91c      	bls.n	800225a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	3b1e      	subs	r3, #30
 8002232:	2207      	movs	r2, #7
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6898      	ldr	r0, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	3b1e      	subs	r3, #30
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
 8002258:	e019      	b.n	800228e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6959      	ldr	r1, [r3, #20]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6898      	ldr	r0, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d84f      	bhi.n	8002350 <HAL_ADC_ConfigChannel+0x28c>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022eb 	.word	0x080022eb
 80022c0:	0800230d 	.word	0x0800230d
 80022c4:	0800232f 	.word	0x0800232f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ce:	4b9f      	ldr	r3, [pc, #636]	; (800254c <HAL_ADC_ConfigChannel+0x488>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	0691      	lsls	r1, r2, #26
 80022d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022da:	430a      	orrs	r2, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022e6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022e8:	e07e      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022f0:	4b96      	ldr	r3, [pc, #600]	; (800254c <HAL_ADC_ConfigChannel+0x488>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	0691      	lsls	r1, r2, #26
 80022fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022fc:	430a      	orrs	r2, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002308:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800230a:	e06d      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002312:	4b8e      	ldr	r3, [pc, #568]	; (800254c <HAL_ADC_ConfigChannel+0x488>)
 8002314:	4013      	ands	r3, r2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	0691      	lsls	r1, r2, #26
 800231c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800231e:	430a      	orrs	r2, r1
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800232a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800232c:	e05c      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002334:	4b85      	ldr	r3, [pc, #532]	; (800254c <HAL_ADC_ConfigChannel+0x488>)
 8002336:	4013      	ands	r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	0691      	lsls	r1, r2, #26
 800233e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002340:	430a      	orrs	r2, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800234c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800234e:	e04b      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002372:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002396:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	069b      	lsls	r3, r3, #26
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	069b      	lsls	r3, r3, #26
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d10a      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023de:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023e0:	e001      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023e6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x344>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x344>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_ADC_ConfigChannel+0x346>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8131 	bne.w	8002672 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d00f      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	400a      	ands	r2, r1
 8002432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002436:	e049      	b.n	80024cc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b09      	cmp	r3, #9
 8002458:	d91c      	bls.n	8002494 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6999      	ldr	r1, [r3, #24]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1b      	subs	r3, #27
 800246c:	2207      	movs	r2, #7
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	4019      	ands	r1, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6898      	ldr	r0, [r3, #8]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	3b1b      	subs	r3, #27
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	e01b      	b.n	80024cc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6959      	ldr	r1, [r3, #20]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	2207      	movs	r2, #7
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4019      	ands	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6898      	ldr	r0, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x41c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_ADC_ConfigChannel+0x48c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x420>
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_ADC_ConfigChannel+0x490>)
 80024e2:	e000      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x422>
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_ADC_ConfigChannel+0x494>)
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002500:	2b11      	cmp	r3, #17
 8002502:	d105      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002514:	2b12      	cmp	r3, #18
 8002516:	f040 80ac 	bne.w	8002672 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800251a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80a5 	bne.w	8002672 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002530:	d102      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x474>
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_ADC_ConfigChannel+0x48c>)
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e023      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4bc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_ADC_ConfigChannel+0x48c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10c      	bne.n	800255c <HAL_ADC_ConfigChannel+0x498>
 8002542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e01a      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4bc>
 800254a:	bf00      	nop
 800254c:	83fff000 	.word	0x83fff000
 8002550:	50000100 	.word	0x50000100
 8002554:	50000300 	.word	0x50000300
 8002558:	50000700 	.word	0x50000700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_ADC_ConfigChannel+0x5c8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d102      	bne.n	800256c <HAL_ADC_ConfigChannel+0x4a8>
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_ADC_ConfigChannel+0x5cc>)
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e009      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4bc>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a47      	ldr	r2, [pc, #284]	; (8002690 <HAL_ADC_ConfigChannel+0x5cc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d102      	bne.n	800257c <HAL_ADC_ConfigChannel+0x4b8>
 8002576:	4b45      	ldr	r3, [pc, #276]	; (800268c <HAL_ADC_ConfigChannel+0x5c8>)
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e001      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4bc>
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x4dc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x4dc>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x4de>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d150      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x504>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x504>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_ADC_ConfigChannel+0x506>
 80025c8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d13c      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d11d      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x54e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025de:	d118      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_ADC_ConfigChannel+0x5d0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a29      	ldr	r2, [pc, #164]	; (8002698 <HAL_ADC_ConfigChannel+0x5d4>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0c9a      	lsrs	r2, r3, #18
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002602:	e002      	b.n	800260a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f9      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002610:	e02e      	b.n	8002670 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b11      	cmp	r3, #17
 8002618:	d10b      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x56e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002622:	d106      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800262c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002630:	e01e      	b.n	8002670 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b12      	cmp	r3, #18
 8002638:	d11a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800263a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002644:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002646:	e013      	b.n	8002670 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800265a:	e00a      	b.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800266e:	e000      	b.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002670:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800267a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800267e:	4618      	mov	r0, r3
 8002680:	376c      	adds	r7, #108	; 0x6c
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	50000400 	.word	0x50000400
 8002690:	50000500 	.word	0x50000500
 8002694:	20000004 	.word	0x20000004
 8002698:	431bde83 	.word	0x431bde83

0800269c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800269c:	b480      	push	{r7}
 800269e:	b099      	sub	sp, #100	; 0x64
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b4:	d102      	bne.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	e01a      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6a      	ldr	r2, [pc, #424]	; (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d103      	bne.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80026c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	e011      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d102      	bne.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026d8:	4b66      	ldr	r3, [pc, #408]	; (8002874 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	e009      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a64      	ldr	r2, [pc, #400]	; (8002874 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	e001      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b0      	b.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002706:	2302      	movs	r3, #2
 8002708:	e0a9      	b.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 808d 	bne.w	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8086 	bne.w	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d004      	beq.n	8002744 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002746:	e000      	b.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002748:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800274a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d040      	beq.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002766:	035b      	lsls	r3, r3, #13
 8002768:	430b      	orrs	r3, r1
 800276a:	431a      	orrs	r2, r3
 800276c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d108      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d15c      	bne.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80027b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d14b      	bne.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80027b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	6892      	ldr	r2, [r2, #8]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027d4:	e03c      	b.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d123      	bne.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002824:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d112      	bne.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800282a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002832:	f023 030f 	bic.w	r3, r3, #15
 8002836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002838:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800283a:	e009      	b.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800284e:	e000      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002850:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800285a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800285e:	4618      	mov	r0, r3
 8002860:	3764      	adds	r7, #100	; 0x64
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	50000100 	.word	0x50000100
 8002870:	50000400 	.word	0x50000400
 8002874:	50000500 	.word	0x50000500
 8002878:	50000300 	.word	0x50000300
 800287c:	50000700 	.word	0x50000700

08002880 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d108      	bne.n	80028ac <ADC_Enable+0x2c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <ADC_Enable+0x2c>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <ADC_Enable+0x2e>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d13c      	bne.n	800292c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <ADC_Enable+0xb8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e028      	b.n	800292e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028ec:	f7fe ffe0 	bl	80018b0 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028f2:	e014      	b.n	800291e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f4:	f7fe ffdc 	bl	80018b0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d90d      	bls.n	800291e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d1e3      	bne.n	80028f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	8000003f 	.word	0x8000003f

0800293c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <ADC_Disable+0x2c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <ADC_Disable+0x2c>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <ADC_Disable+0x2e>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d040      	beq.n	80029f0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030d 	and.w	r3, r3, #13
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10f      	bne.n	800299c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0202 	orr.w	r2, r2, #2
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2203      	movs	r2, #3
 8002992:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002994:	f7fe ff8c 	bl	80018b0 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800299a:	e022      	b.n	80029e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0210 	orr.w	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e01c      	b.n	80029f2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029b8:	f7fe ff7a 	bl	80018b0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d90d      	bls.n	80029e2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d0e3      	beq.n	80029b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	db0b      	blt.n	8002a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <__NVIC_EnableIRQ+0x38>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2001      	movs	r0, #1
 8002a82:	fa00 f202 	lsl.w	r2, r0, r2
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000e100 	.word	0xe000e100

08002a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	db0a      	blt.n	8002ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	490c      	ldr	r1, [pc, #48]	; (8002ae8 <__NVIC_SetPriority+0x4c>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac4:	e00a      	b.n	8002adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4908      	ldr	r1, [pc, #32]	; (8002aec <__NVIC_SetPriority+0x50>)
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	3b04      	subs	r3, #4
 8002ad4:	0112      	lsls	r2, r2, #4
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	440b      	add	r3, r1
 8002ada:	761a      	strb	r2, [r3, #24]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000e100 	.word	0xe000e100
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f1c3 0307 	rsb	r3, r3, #7
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	bf28      	it	cs
 8002b0e:	2304      	movcs	r3, #4
 8002b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3304      	adds	r3, #4
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d902      	bls.n	8002b20 <NVIC_EncodePriority+0x30>
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3b03      	subs	r3, #3
 8002b1e:	e000      	b.n	8002b22 <NVIC_EncodePriority+0x32>
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	401a      	ands	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b38:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	43d9      	mvns	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	4313      	orrs	r3, r2
         );
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b68:	d301      	bcc.n	8002b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00f      	b.n	8002b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <SysTick_Config+0x40>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b76:	210f      	movs	r1, #15
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	f7ff ff8e 	bl	8002a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <SysTick_Config+0x40>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <SysTick_Config+0x40>)
 8002b88:	2207      	movs	r2, #7
 8002b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000e010 	.word	0xe000e010

08002b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff29 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc4:	f7ff ff3e 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff8e 	bl	8002af0 <NVIC_EncodePriority>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff5d 	bl	8002a9c <__NVIC_SetPriority>
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff31 	bl	8002a60 <__NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffa2 	bl	8002b58 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e014      	b.n	8002c5a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fe fc1f 	bl	8001484 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	795b      	ldrb	r3, [r3, #5]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DAC_Start_DMA+0x1e>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e08e      	b.n	8002df0 <HAL_DAC_Start_DMA+0x13c>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d12a      	bne.n	8002d3a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_DAC_Start_DMA+0x144>)
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <HAL_DAC_Start_DMA+0x148>)
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a41      	ldr	r2, [pc, #260]	; (8002e00 <HAL_DAC_Start_DMA+0x14c>)
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d009      	beq.n	8002d26 <HAL_DAC_Start_DMA+0x72>
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d00c      	beq.n	8002d30 <HAL_DAC_Start_DMA+0x7c>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d000      	beq.n	8002d1c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002d1a:	e039      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3308      	adds	r3, #8
 8002d22:	617b      	str	r3, [r7, #20]
        break;
 8002d24:	e034      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	617b      	str	r3, [r7, #20]
        break;
 8002d2e:	e02f      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3310      	adds	r3, #16
 8002d36:	617b      	str	r3, [r7, #20]
        break;
 8002d38:	e02a      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_DAC_Start_DMA+0x150>)
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <HAL_DAC_Start_DMA+0x154>)
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4a2f      	ldr	r2, [pc, #188]	; (8002e0c <HAL_DAC_Start_DMA+0x158>)
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d60:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d009      	beq.n	8002d7c <HAL_DAC_Start_DMA+0xc8>
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00c      	beq.n	8002d86 <HAL_DAC_Start_DMA+0xd2>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d000      	beq.n	8002d72 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d70:	e00e      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	617b      	str	r3, [r7, #20]
        break;
 8002d7a:	e009      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3318      	adds	r3, #24
 8002d82:	617b      	str	r3, [r7, #20]
        break;
 8002d84:	e004      	b.n	8002d90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	331c      	adds	r3, #28
 8002d8c:	617b      	str	r3, [r7, #20]
        break;
 8002d8e:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6898      	ldr	r0, [r3, #8]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	f000 f9b0 	bl	8003114 <HAL_DMA_Start_IT>
 8002db4:	e00e      	b.n	8002dd4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68d8      	ldr	r0, [r3, #12]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	f000 f9a0 	bl	8003114 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	409a      	lsls	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	08002faf 	.word	0x08002faf
 8002dfc:	08002fd1 	.word	0x08002fd1
 8002e00:	08002fed 	.word	0x08002fed
 8002e04:	0800301b 	.word	0x0800301b
 8002e08:	0800303d 	.word	0x0800303d
 8002e0c:	08003059 	.word	0x08003059

08002e10 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e26:	d120      	bne.n	8002e6a <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d118      	bne.n	8002e6a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e62:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff1a 	bl	8002c9e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e78:	d120      	bne.n	8002ebc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e88:	d118      	bne.n	8002ebc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f86f 	bl	8002f9a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	795b      	ldrb	r3, [r3, #5]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_DAC_ConfigChannel+0x20>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e036      	b.n	8002f52 <HAL_DAC_ConfigChannel+0x8e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2202      	movs	r2, #2
 8002eee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ef8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4013      	ands	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	22c0      	movs	r2, #192	; 0xc0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	400a      	ands	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fe50 	bl	8002c62 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	711a      	strb	r2, [r3, #4]
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff fe49 	bl	8002c76 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f043 0204 	orr.w	r2, r3, #4
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fe3f 	bl	8002c8a <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	711a      	strb	r2, [r3, #4]
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff ff98 	bl	8002f5e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	711a      	strb	r2, [r3, #4]
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff ff91 	bl	8002f72 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff87 	bl	8002f86 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	711a      	strb	r2, [r3, #4]
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e037      	b.n	800310c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f940 	bl	8003374 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}  
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e04a      	b.n	80031ca <HAL_DMA_Start_IT+0xb6>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003142:	2b01      	cmp	r3, #1
 8003144:	d13a      	bne.n	80031bc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f8d4 	bl	8003318 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 020e 	orr.w	r2, r2, #14
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 020a 	orr.w	r2, r2, #10
 8003198:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0204 	bic.w	r2, r2, #4
 80031a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e005      	b.n	80031c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
 80031c6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2204      	movs	r2, #4
 80031f0:	409a      	lsls	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d024      	beq.n	8003244 <HAL_DMA_IRQHandler+0x72>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01f      	beq.n	8003244 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0204 	bic.w	r2, r2, #4
 8003220:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	2104      	movs	r1, #4
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06a      	beq.n	8003310 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003242:	e065      	b.n	8003310 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2202      	movs	r2, #2
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02c      	beq.n	80032ae <HAL_DMA_IRQHandler+0xdc>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d027      	beq.n	80032ae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 020a 	bic.w	r2, r2, #10
 800327a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	2102      	movs	r1, #2
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d035      	beq.n	8003310 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80032ac:	e030      	b.n	8003310 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_DMA_IRQHandler+0x13e>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020e 	bic.w	r2, r2, #14
 80032d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
    }
  }
}  
 800330e:	e7ff      	b.n	8003310 <HAL_DMA_IRQHandler+0x13e>
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b10      	cmp	r3, #16
 8003344:	d108      	bne.n	8003358 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003356:	e007      	b.n	8003368 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d80f      	bhi.n	80033a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003390:	4413      	add	r3, r2
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <DMA_CalcBaseAndBitshift+0x68>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	009a      	lsls	r2, r3, #2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80033a6:	e00e      	b.n	80033c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <DMA_CalcBaseAndBitshift+0x70>)
 80033b0:	4413      	add	r3, r2
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <DMA_CalcBaseAndBitshift+0x68>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	009a      	lsls	r2, r3, #2
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <DMA_CalcBaseAndBitshift+0x74>)
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40020407 	.word	0x40020407
 80033d8:	bffdfff8 	.word	0xbffdfff8
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	40020000 	.word	0x40020000
 80033e4:	bffdfbf8 	.word	0xbffdfbf8
 80033e8:	40020400 	.word	0x40020400

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fa:	e154      	b.n	80036a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8146 	beq.w	80036a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d00b      	beq.n	8003434 <HAL_GPIO_Init+0x48>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d007      	beq.n	8003434 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003428:	2b11      	cmp	r3, #17
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b12      	cmp	r3, #18
 8003432:	d130      	bne.n	8003496 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800346a:	2201      	movs	r2, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0201 	and.w	r2, r3, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0xea>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b12      	cmp	r3, #18
 80034d4:	d123      	bne.n	800351e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3208      	adds	r2, #8
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	6939      	ldr	r1, [r7, #16]
 800351a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0203 	and.w	r2, r3, #3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a0 	beq.w	80036a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003560:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <HAL_GPIO_Init+0x2d8>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	4a57      	ldr	r2, [pc, #348]	; (80036c4 <HAL_GPIO_Init+0x2d8>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6193      	str	r3, [r2, #24]
 800356c:	4b55      	ldr	r3, [pc, #340]	; (80036c4 <HAL_GPIO_Init+0x2d8>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003578:	4a53      	ldr	r2, [pc, #332]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	220f      	movs	r2, #15
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035a2:	d019      	beq.n	80035d8 <HAL_GPIO_Init+0x1ec>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a49      	ldr	r2, [pc, #292]	; (80036cc <HAL_GPIO_Init+0x2e0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_GPIO_Init+0x1e8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a48      	ldr	r2, [pc, #288]	; (80036d0 <HAL_GPIO_Init+0x2e4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00d      	beq.n	80035d0 <HAL_GPIO_Init+0x1e4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a47      	ldr	r2, [pc, #284]	; (80036d4 <HAL_GPIO_Init+0x2e8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <HAL_GPIO_Init+0x1e0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a46      	ldr	r2, [pc, #280]	; (80036d8 <HAL_GPIO_Init+0x2ec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_GPIO_Init+0x1dc>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e008      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035c8:	2305      	movs	r3, #5
 80035ca:	e006      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035cc:	2303      	movs	r3, #3
 80035ce:	e004      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e002      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035d8:	2300      	movs	r3, #0
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	f002 0203 	and.w	r2, r2, #3
 80035e0:	0092      	lsls	r2, r2, #2
 80035e2:	4093      	lsls	r3, r2
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035ea:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f8:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800361c:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003622:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003670:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <HAL_GPIO_Init+0x2f0>)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3301      	adds	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f aea3 	bne.w	80033fc <HAL_GPIO_Init+0x10>
  }
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40010000 	.word	0x40010000
 80036cc:	48000400 	.word	0x48000400
 80036d0:	48000800 	.word	0x48000800
 80036d4:	48000c00 	.word	0x48000c00
 80036d8:	48001000 	.word	0x48001000
 80036dc:	40010400 	.word	0x40010400

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f0:	787b      	ldrb	r3, [r7, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d006      	beq.n	8003734 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd f8ae 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40010400 	.word	0x40010400

08003740 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	b08b      	sub	sp, #44	; 0x2c
 8003744:	af06      	add	r7, sp, #24
 8003746:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0d0      	b.n	80038f4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd ff6e 	bl	8001648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2203      	movs	r2, #3
 8003770:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fa0d 	bl	8005b98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e04c      	b.n	800381e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	3301      	adds	r3, #1
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	b298      	uxth	r0, r3
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	3336      	adds	r3, #54	; 0x36
 80037c2:	4602      	mov	r2, r0
 80037c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	3303      	adds	r3, #3
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	440b      	add	r3, r1
 80037ea:	3338      	adds	r3, #56	; 0x38
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	440b      	add	r3, r1
 80037fe:	333c      	adds	r3, #60	; 0x3c
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	3340      	adds	r3, #64	; 0x40
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	3301      	adds	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d3ad      	bcc.n	8003784 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e044      	b.n	80038b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	440b      	add	r3, r1
 800387e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3301      	adds	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3b5      	bcc.n	800382e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	687e      	ldr	r6, [r7, #4]
 80038ca:	466d      	mov	r5, sp
 80038cc:	f106 0410 	add.w	r4, r6, #16
 80038d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	1d33      	adds	r3, r6, #4
 80038da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038dc:	6838      	ldr	r0, [r7, #0]
 80038de:	f002 f976 	bl	8005bce <USB_DevInit>

  hpcd->USB_Address = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003902:	af00      	add	r7, sp, #0
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f000 bef4 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 816a 	beq.w	8003bfa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003926:	4bb3      	ldr	r3, [pc, #716]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003932:	4bb0      	ldr	r3, [pc, #704]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b08      	cmp	r3, #8
 800393c:	d159      	bne.n	80039f2 <HAL_RCC_OscConfig+0xf6>
 800393e:	4bad      	ldr	r3, [pc, #692]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d152      	bne.n	80039f2 <HAL_RCC_OscConfig+0xf6>
 800394c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003950:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003960:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x82>
 8003978:	4b9e      	ldr	r3, [pc, #632]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0xae>
 800397e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003982:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003996:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800399a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80039a6:	4b93      	ldr	r3, [pc, #588]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80039b2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039b6:	fa92 f2a2 	rbit	r2, r2
 80039ba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80039be:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80039c2:	fab2 f282 	clz	r2, r2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f042 0220 	orr.w	r2, r2, #32
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f002 021f 	and.w	r2, r2, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 810c 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x2fc>
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 8106 	bne.w	8003bf8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f000 be86 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fc:	d106      	bne.n	8003a0c <HAL_RCC_OscConfig+0x110>
 80039fe:	4b7d      	ldr	r3, [pc, #500]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7c      	ldr	r2, [pc, #496]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e030      	b.n	8003a6e <HAL_RCC_OscConfig+0x172>
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x134>
 8003a16:	4b77      	ldr	r3, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a76      	ldr	r2, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a73      	ldr	r2, [pc, #460]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01e      	b.n	8003a6e <HAL_RCC_OscConfig+0x172>
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x15a>
 8003a3c:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6c      	ldr	r2, [pc, #432]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e00b      	b.n	8003a6e <HAL_RCC_OscConfig+0x172>
 8003a56:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a66      	ldr	r2, [pc, #408]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a63      	ldr	r2, [pc, #396]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a6e:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	495d      	ldr	r1, [pc, #372]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d059      	beq.n	8003b40 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd ff10 	bl	80018b0 <HAL_GetTick>
 8003a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a96:	f7fd ff0b 	bl	80018b0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d902      	bls.n	8003aac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	f000 be29 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>
 8003aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003ac0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d102      	bne.n	8003ade <HAL_RCC_OscConfig+0x1e2>
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x20e>
 8003ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003afa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003b06:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003b12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b16:	fa92 f2a2 	rbit	r2, r2
 8003b1a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b22:	fab2 f282 	clz	r2, r2
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	f042 0220 	orr.w	r2, r2, #32
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f002 021f 	and.w	r2, r2, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f202 	lsl.w	r2, r1, r2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ab      	beq.n	8003a96 <HAL_RCC_OscConfig+0x19a>
 8003b3e:	e05c      	b.n	8003bfa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd feb6 	bl	80018b0 <HAL_GetTick>
 8003b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4a:	f7fd feb1 	bl	80018b0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d902      	bls.n	8003b60 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	f000 bdcf 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>
 8003b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_RCC_OscConfig+0x296>
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	e015      	b.n	8003bbe <HAL_RCC_OscConfig+0x2c2>
 8003b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003baa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003bae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_RCC_OscConfig+0x2f8>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003bc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003bca:	fa92 f2a2 	rbit	r2, r2
 8003bce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003bd2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003bd6:	fab2 f282 	clz	r2, r2
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f042 0220 	orr.w	r2, r2, #32
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f002 021f 	and.w	r2, r2, #31
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ab      	bne.n	8003b4a <HAL_RCC_OscConfig+0x24e>
 8003bf2:	e002      	b.n	8003bfa <HAL_RCC_OscConfig+0x2fe>
 8003bf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 816f 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c0a:	4bd0      	ldr	r3, [pc, #832]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c16:	4bcd      	ldr	r3, [pc, #820]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d16c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x400>
 8003c22:	4bca      	ldr	r3, [pc, #808]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d166      	bne.n	8003cfc <HAL_RCC_OscConfig+0x400>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_OscConfig+0x362>
 8003c58:	4bbc      	ldr	r3, [pc, #752]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e013      	b.n	8003c86 <HAL_RCC_OscConfig+0x38a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c70:	2302      	movs	r3, #2
 8003c72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c82:	4bb2      	ldr	r3, [pc, #712]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2202      	movs	r2, #2
 8003c88:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c90:	fa92 f2a2 	rbit	r2, r2
 8003c94:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c98:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c9c:	fab2 f282 	clz	r2, r2
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f042 0220 	orr.w	r2, r2, #32
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f002 021f 	and.w	r2, r2, #31
 8003cac:	2101      	movs	r1, #1
 8003cae:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x3cc>
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f000 bd1b 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	21f8      	movs	r1, #248	; 0xf8
 8003cd8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ce0:	fa91 f1a1 	rbit	r1, r1
 8003ce4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ce8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003cec:	fab1 f181 	clz	r1, r1
 8003cf0:	b2c9      	uxtb	r1, r1
 8003cf2:	408b      	lsls	r3, r1
 8003cf4:	4995      	ldr	r1, [pc, #596]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e0f5      	b.n	8003ee8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8085 	beq.w	8003e12 <HAL_RCC_OscConfig+0x516>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2301      	movs	r3, #1
 8003d32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd fdbc 	bl	80018b0 <HAL_GetTick>
 8003d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fd fdb7 	bl	80018b0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d902      	bls.n	8003d54 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	f000 bcd5 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_RCC_OscConfig+0x488>
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	e013      	b.n	8003dac <HAL_RCC_OscConfig+0x4b0>
 8003d84:	2302      	movs	r3, #2
 8003d86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d96:	2302      	movs	r3, #2
 8003d98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003da0:	fa93 f3a3 	rbit	r3, r3
 8003da4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2202      	movs	r2, #2
 8003dae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003db2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003db6:	fa92 f2a2 	rbit	r2, r2
 8003dba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003dbe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003dc2:	fab2 f282 	clz	r2, r2
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	f042 0220 	orr.w	r2, r2, #32
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	f002 021f 	and.w	r2, r2, #31
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0af      	beq.n	8003d3e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dde:	4b5b      	ldr	r3, [pc, #364]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	21f8      	movs	r1, #248	; 0xf8
 8003dee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003df6:	fa91 f1a1 	rbit	r1, r1
 8003dfa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003dfe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e02:	fab1 f181 	clz	r1, r1
 8003e06:	b2c9      	uxtb	r1, r1
 8003e08:	408b      	lsls	r3, r1
 8003e0a:	4950      	ldr	r1, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	e06a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x5ec>
 8003e12:	2301      	movs	r3, #1
 8003e14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fd37 	bl	80018b0 <HAL_GetTick>
 8003e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fd fd32 	bl	80018b0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d902      	bls.n	8003e5e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	f000 bc50 	b.w	80046fe <HAL_RCC_OscConfig+0xe02>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e68:	fa93 f3a3 	rbit	r3, r3
 8003e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d102      	bne.n	8003e8e <HAL_RCC_OscConfig+0x592>
 8003e88:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	e013      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5ba>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_RCC_OscConfig+0x650>)
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ebc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ec0:	fa92 f2a2 	rbit	r2, r2
 8003ec4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ec8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ecc:	fab2 f282 	clz	r2, r2
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	f042 0220 	orr.w	r2, r2, #32
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	f002 021f 	and.w	r2, r2, #31
 8003edc:	2101      	movs	r1, #1
 8003ede:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1af      	bne.n	8003e48 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80da 	beq.w	80040ac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d069      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x6da>
 8003f02:	2301      	movs	r3, #1
 8003f04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_OscConfig+0x654>)
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	461a      	mov	r2, r3
 8003f28:	2301      	movs	r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fcc0 	bl	80018b0 <HAL_GetTick>
 8003f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f34:	e00e      	b.n	8003f54 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fd fcbb 	bl	80018b0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d906      	bls.n	8003f54 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e3d9      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	10908120 	.word	0x10908120
 8003f54:	2302      	movs	r3, #2
 8003f56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003f82:	2202      	movs	r2, #2
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f2a3 	rbit	r2, r3
 8003f90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003f94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f96:	4ba5      	ldr	r3, [pc, #660]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8003f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	6019      	str	r1, [r3, #0]
 8003fa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fa93 f1a3 	rbit	r1, r3
 8003fac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fb0:	6019      	str	r1, [r3, #0]
  return result;
 8003fb2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0b0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x63a>
 8003fd4:	e06a      	b.n	80040ac <HAL_RCC_OscConfig+0x7b0>
 8003fd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	fa93 f2a3 	rbit	r2, r3
 8003fe8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003fec:	601a      	str	r2, [r3, #0]
  return result;
 8003fee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ff2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b8c      	ldr	r3, [pc, #560]	; (8004230 <HAL_RCC_OscConfig+0x934>)
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	2300      	movs	r3, #0
 8004006:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004008:	f7fd fc52 	bl	80018b0 <HAL_GetTick>
 800400c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	e009      	b.n	8004026 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fd fc4d 	bl	80018b0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e36b      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 8004026:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800402a:	2202      	movs	r2, #2
 800402c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	fa93 f2a3 	rbit	r2, r3
 8004038:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004042:	2202      	movs	r2, #2
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800405a:	2202      	movs	r2, #2
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800406c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406e:	4b6f      	ldr	r3, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004072:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004076:	2102      	movs	r1, #2
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	fa93 f1a3 	rbit	r1, r3
 8004084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004088:	6019      	str	r1, [r3, #0]
  return result;
 800408a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fab3 f383 	clz	r3, r3
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1b2      	bne.n	8004012 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8158 	beq.w	800436c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c2:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_OscConfig+0x930>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d112      	bne.n	80040f4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_RCC_OscConfig+0x930>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4a56      	ldr	r2, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x930>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	61d3      	str	r3, [r2, #28]
 80040da:	4b54      	ldr	r3, [pc, #336]	; (800422c <HAL_RCC_OscConfig+0x930>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f107 0308 	add.w	r3, r7, #8
 80040ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <HAL_RCC_OscConfig+0x938>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11a      	bne.n	8004136 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004100:	4b4c      	ldr	r3, [pc, #304]	; (8004234 <HAL_RCC_OscConfig+0x938>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a4b      	ldr	r2, [pc, #300]	; (8004234 <HAL_RCC_OscConfig+0x938>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410c:	f7fd fbd0 	bl	80018b0 <HAL_GetTick>
 8004110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	e009      	b.n	800412a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fd fbcb 	bl	80018b0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e2e9      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <HAL_RCC_OscConfig+0x938>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ef      	beq.n	8004116 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x852>
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4a39      	ldr	r2, [pc, #228]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6213      	str	r3, [r2, #32]
 800414c:	e02f      	b.n	80041ae <HAL_RCC_OscConfig+0x8b2>
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10c      	bne.n	8004172 <HAL_RCC_OscConfig+0x876>
 8004158:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6213      	str	r3, [r2, #32]
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800416a:	f023 0304 	bic.w	r3, r3, #4
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e01d      	b.n	80041ae <HAL_RCC_OscConfig+0x8b2>
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d10c      	bne.n	8004196 <HAL_RCC_OscConfig+0x89a>
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a2a      	ldr	r2, [pc, #168]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6213      	str	r3, [r2, #32]
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4a27      	ldr	r2, [pc, #156]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6213      	str	r3, [r2, #32]
 8004194:	e00b      	b.n	80041ae <HAL_RCC_OscConfig+0x8b2>
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4a24      	ldr	r2, [pc, #144]	; (800422c <HAL_RCC_OscConfig+0x930>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	6213      	str	r3, [r2, #32]
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_OscConfig+0x930>)
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <HAL_RCC_OscConfig+0x930>)
 80041a8:	f023 0304 	bic.w	r3, r3, #4
 80041ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d06b      	beq.n	8004290 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b8:	f7fd fb7a 	bl	80018b0 <HAL_GetTick>
 80041bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00b      	b.n	80041da <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fb75 	bl	80018b0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e291      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 80041da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80041de:	2202      	movs	r2, #2
 80041e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fa93 f2a3 	rbit	r2, r3
 80041ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80041f6:	2202      	movs	r2, #2
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	fa93 f2a3 	rbit	r2, r3
 8004204:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004208:	601a      	str	r2, [r3, #0]
  return result;
 800420a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800420e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d109      	bne.n	8004238 <HAL_RCC_OscConfig+0x93c>
 8004224:	4b01      	ldr	r3, [pc, #4]	; (800422c <HAL_RCC_OscConfig+0x930>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	e014      	b.n	8004254 <HAL_RCC_OscConfig+0x958>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	10908120 	.word	0x10908120
 8004234:	40007000 	.word	0x40007000
 8004238:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800423c:	2202      	movs	r2, #2
 800423e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	fa93 f2a3 	rbit	r2, r3
 800424a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	4bbb      	ldr	r3, [pc, #748]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004258:	2102      	movs	r1, #2
 800425a:	6011      	str	r1, [r2, #0]
 800425c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	fa92 f1a2 	rbit	r1, r2
 8004266:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800426a:	6011      	str	r1, [r2, #0]
  return result;
 800426c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	fab2 f282 	clz	r2, r2
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f002 021f 	and.w	r2, r2, #31
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f202 	lsl.w	r2, r1, r2
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d099      	beq.n	80041c2 <HAL_RCC_OscConfig+0x8c6>
 800428e:	e063      	b.n	8004358 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fd fb0e 	bl	80018b0 <HAL_GetTick>
 8004294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	e00b      	b.n	80042b2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fd fb09 	bl	80018b0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e225      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 80042b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042b6:	2202      	movs	r2, #2
 80042b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	fa93 f2a3 	rbit	r2, r3
 80042c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042ce:	2202      	movs	r2, #2
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	fa93 f2a3 	rbit	r2, r3
 80042dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042e0:	601a      	str	r2, [r3, #0]
  return result;
 80042e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_OscConfig+0xa06>
 80042fc:	4b90      	ldr	r3, [pc, #576]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	e00d      	b.n	800431e <HAL_RCC_OscConfig+0xa22>
 8004302:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004306:	2202      	movs	r2, #2
 8004308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	fa93 f2a3 	rbit	r2, r3
 8004314:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	4b89      	ldr	r3, [pc, #548]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004322:	2102      	movs	r1, #2
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	fa92 f1a2 	rbit	r1, r2
 8004330:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004334:	6011      	str	r1, [r2, #0]
  return result;
 8004336:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	fab2 f282 	clz	r2, r2
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f002 021f 	and.w	r2, r2, #31
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1a0      	bne.n	800429a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004358:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b77      	ldr	r3, [pc, #476]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4a76      	ldr	r2, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 81c2 	beq.w	80046fc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b71      	ldr	r3, [pc, #452]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	f000 819c 	beq.w	80046be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b02      	cmp	r3, #2
 800438e:	f040 8114 	bne.w	80045ba <HAL_RCC_OscConfig+0xcbe>
 8004392:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004396:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800439a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	fa93 f2a3 	rbit	r2, r3
 80043a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043aa:	601a      	str	r2, [r3, #0]
  return result;
 80043ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fd fa72 	bl	80018b0 <HAL_GetTick>
 80043cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d0:	e009      	b.n	80043e6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fd fa6d 	bl	80018b0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e18b      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 80043e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	fa93 f2a3 	rbit	r2, r3
 80043fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80043fe:	601a      	str	r2, [r3, #0]
  return result;
 8004400:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004404:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <HAL_RCC_OscConfig+0xb24>
 800441a:	4b49      	ldr	r3, [pc, #292]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	e01b      	b.n	8004458 <HAL_RCC_OscConfig+0xb5c>
 8004420:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	fa93 f2a3 	rbit	r2, r3
 8004434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800443e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	fa93 f2a3 	rbit	r2, r3
 800444e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800445c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	fa92 f1a2 	rbit	r1, r2
 800446c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004470:	6011      	str	r1, [r2, #0]
  return result;
 8004472:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f042 0220 	orr.w	r2, r2, #32
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f002 021f 	and.w	r2, r2, #31
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d19e      	bne.n	80043d2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004494:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	4925      	ldr	r1, [pc, #148]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
 80044b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	fa93 f2a3 	rbit	r2, r3
 80044c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044c8:	601a      	str	r2, [r3, #0]
  return result;
 80044ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	fab3 f383 	clz	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	461a      	mov	r2, r3
 80044e2:	2301      	movs	r3, #1
 80044e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fd f9e3 	bl	80018b0 <HAL_GetTick>
 80044ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ee:	e009      	b.n	8004504 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd f9de 	bl	80018b0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0fc      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 8004504:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800450c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	fa93 f2a3 	rbit	r2, r3
 8004518:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800451c:	601a      	str	r2, [r3, #0]
  return result;
 800451e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d105      	bne.n	8004544 <HAL_RCC_OscConfig+0xc48>
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <HAL_RCC_OscConfig+0xc44>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	e01e      	b.n	800457c <HAL_RCC_OscConfig+0xc80>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	fa93 f2a3 	rbit	r2, r3
 8004558:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fa93 f2a3 	rbit	r2, r3
 8004572:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	4b63      	ldr	r3, [pc, #396]	; (8004708 <HAL_RCC_OscConfig+0xe0c>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	fa92 f1a2 	rbit	r1, r2
 8004590:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004594:	6011      	str	r1, [r2, #0]
  return result;
 8004596:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	f042 0220 	orr.w	r2, r2, #32
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	f002 021f 	and.w	r2, r2, #31
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f202 	lsl.w	r2, r1, r2
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d09b      	beq.n	80044f0 <HAL_RCC_OscConfig+0xbf4>
 80045b8:	e0a0      	b.n	80046fc <HAL_RCC_OscConfig+0xe00>
 80045ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	fa93 f2a3 	rbit	r2, r3
 80045ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d2:	601a      	str	r2, [r3, #0]
  return result;
 80045d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fd f95e 	bl	80018b0 <HAL_GetTick>
 80045f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f8:	e009      	b.n	800460e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fd f959 	bl	80018b0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e077      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
 800460e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	fa93 f2a3 	rbit	r2, r3
 8004622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004626:	601a      	str	r2, [r3, #0]
  return result;
 8004628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800462c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b01      	cmp	r3, #1
 8004640:	d102      	bne.n	8004648 <HAL_RCC_OscConfig+0xd4c>
 8004642:	4b31      	ldr	r3, [pc, #196]	; (8004708 <HAL_RCC_OscConfig+0xe0c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	e01b      	b.n	8004680 <HAL_RCC_OscConfig+0xd84>
 8004648:	f107 0320 	add.w	r3, r7, #32
 800464c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f107 0320 	add.w	r3, r7, #32
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fa93 f2a3 	rbit	r2, r3
 800465c:	f107 031c 	add.w	r3, r7, #28
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f107 0318 	add.w	r3, r7, #24
 8004666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	fa93 f2a3 	rbit	r2, r3
 8004676:	f107 0314 	add.w	r3, r7, #20
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <HAL_RCC_OscConfig+0xe0c>)
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	f107 0210 	add.w	r2, r7, #16
 8004684:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004688:	6011      	str	r1, [r2, #0]
 800468a:	f107 0210 	add.w	r2, r7, #16
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	fa92 f1a2 	rbit	r1, r2
 8004694:	f107 020c 	add.w	r2, r7, #12
 8004698:	6011      	str	r1, [r2, #0]
  return result;
 800469a:	f107 020c 	add.w	r2, r7, #12
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	f042 0220 	orr.w	r2, r2, #32
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f002 021f 	and.w	r2, r2, #31
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d19e      	bne.n	80045fa <HAL_RCC_OscConfig+0xcfe>
 80046bc:	e01e      	b.n	80046fc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e018      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <HAL_RCC_OscConfig+0xe0c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80046d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d108      	bne.n	80046f8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80046e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80046ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000

0800470c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b09e      	sub	sp, #120	; 0x78
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e162      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004724:	4b90      	ldr	r3, [pc, #576]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d910      	bls.n	8004754 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0207 	bic.w	r2, r3, #7
 800473a:	498b      	ldr	r1, [pc, #556]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e14a      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004760:	4b82      	ldr	r3, [pc, #520]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	497f      	ldr	r1, [pc, #508]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80dc 	beq.w	8004938 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d13c      	bne.n	8004802 <HAL_RCC_ClockConfig+0xf6>
 8004788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800478c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d102      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xa6>
 80047ac:	4b6f      	ldr	r3, [pc, #444]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	e00f      	b.n	80047d2 <HAL_RCC_ClockConfig+0xc6>
 80047b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	667b      	str	r3, [r7, #100]	; 0x64
 80047c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047c4:	663b      	str	r3, [r7, #96]	; 0x60
 80047c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c8:	fa93 f3a3 	rbit	r3, r3
 80047cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ce:	4b67      	ldr	r3, [pc, #412]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80047d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047da:	fa92 f2a2 	rbit	r2, r2
 80047de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80047e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047e2:	fab2 f282 	clz	r2, r2
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f042 0220 	orr.w	r2, r2, #32
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f002 021f 	and.w	r2, r2, #31
 80047f2:	2101      	movs	r1, #1
 80047f4:	fa01 f202 	lsl.w	r2, r1, r2
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d17b      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0f3      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d13c      	bne.n	8004884 <HAL_RCC_ClockConfig+0x178>
 800480a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_RCC_ClockConfig+0x128>
 800482e:	4b4f      	ldr	r3, [pc, #316]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	e00f      	b.n	8004854 <HAL_RCC_ClockConfig+0x148>
 8004834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004838:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	647b      	str	r3, [r7, #68]	; 0x44
 8004842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004846:	643b      	str	r3, [r7, #64]	; 0x40
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004850:	4b46      	ldr	r3, [pc, #280]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004858:	63ba      	str	r2, [r7, #56]	; 0x38
 800485a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485c:	fa92 f2a2 	rbit	r2, r2
 8004860:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004864:	fab2 f282 	clz	r2, r2
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	f042 0220 	orr.w	r2, r2, #32
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	f002 021f 	and.w	r2, r2, #31
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f202 	lsl.w	r2, r1, r2
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d13a      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b2      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
 8004884:	2302      	movs	r3, #2
 8004886:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
 80048a6:	4b31      	ldr	r3, [pc, #196]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	e00d      	b.n	80048c8 <HAL_RCC_ClockConfig+0x1bc>
 80048ac:	2302      	movs	r3, #2
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
 80048b8:	2302      	movs	r3, #2
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	4b29      	ldr	r3, [pc, #164]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	2202      	movs	r2, #2
 80048ca:	61ba      	str	r2, [r7, #24]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	fa92 f2a2 	rbit	r2, r2
 80048d2:	617a      	str	r2, [r7, #20]
  return result;
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	fab2 f282 	clz	r2, r2
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	f042 0220 	orr.w	r2, r2, #32
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	f002 021f 	and.w	r2, r2, #31
 80048e6:	2101      	movs	r1, #1
 80048e8:	fa01 f202 	lsl.w	r2, r1, r2
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e079      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f6:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	491a      	ldr	r1, [pc, #104]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004908:	f7fc ffd2 	bl	80018b0 <HAL_GetTick>
 800490c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fc ffce 	bl	80018b0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e061      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_RCC_ClockConfig+0x260>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 020c 	and.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	429a      	cmp	r2, r3
 8004936:	d1eb      	bne.n	8004910 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d214      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 0207 	bic.w	r2, r3, #7
 800494e:	4906      	ldr	r1, [pc, #24]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b04      	ldr	r3, [pc, #16]	; (8004968 <HAL_RCC_ClockConfig+0x25c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e040      	b.n	80049ea <HAL_RCC_ClockConfig+0x2de>
 8004968:	40022000 	.word	0x40022000
 800496c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_ClockConfig+0x2e8>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	491a      	ldr	r1, [pc, #104]	; (80049f4 <HAL_RCC_ClockConfig+0x2e8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499a:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <HAL_RCC_ClockConfig+0x2e8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4912      	ldr	r1, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x2e8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049ae:	f000 f829 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 80049b2:	4601      	mov	r1, r0
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_RCC_ClockConfig+0x2e8>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049bc:	22f0      	movs	r2, #240	; 0xf0
 80049be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	fa92 f2a2 	rbit	r2, r2
 80049c6:	60fa      	str	r2, [r7, #12]
  return result;
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	40d3      	lsrs	r3, r2
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x2ec>)
 80049d4:	5cd3      	ldrb	r3, [r2, r3]
 80049d6:	fa21 f303 	lsr.w	r3, r1, r3
 80049da:	4a08      	ldr	r2, [pc, #32]	; (80049fc <HAL_RCC_ClockConfig+0x2f0>)
 80049dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <HAL_RCC_ClockConfig+0x2f4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fc ff20 	bl	8001828 <HAL_InitTick>
  
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3778      	adds	r7, #120	; 0x78
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	08008770 	.word	0x08008770
 80049fc:	20000004 	.word	0x20000004
 8004a00:	20000008 	.word	0x20000008

08004a04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b08b      	sub	sp, #44	; 0x2c
 8004a08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	2300      	movs	r3, #0
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x30>
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x36>
 8004a32:	e03c      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a34:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a36:	623b      	str	r3, [r7, #32]
      break;
 8004a38:	e03c      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004a40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	fa92 f2a2 	rbit	r2, r2
 8004a4c:	607a      	str	r2, [r7, #4]
  return result;
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	fab2 f282 	clz	r2, r2
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	40d3      	lsrs	r3, r2
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a5a:	5cd3      	ldrb	r3, [r2, r3]
 8004a5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a5e:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	220f      	movs	r2, #15
 8004a68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	fa92 f2a2 	rbit	r2, r2
 8004a70:	60fa      	str	r2, [r7, #12]
  return result;
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	fab2 f282 	clz	r2, r2
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	40d3      	lsrs	r3, r2
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a7e:	5cd3      	ldrb	r3, [r2, r3]
 8004a80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	623b      	str	r3, [r7, #32]
      break;
 8004aac:	e002      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ab0:	623b      	str	r3, [r7, #32]
      break;
 8004ab2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	372c      	adds	r7, #44	; 0x2c
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	007a1200 	.word	0x007a1200
 8004acc:	08008780 	.word	0x08008780
 8004ad0:	08008790 	.word	0x08008790
 8004ad4:	003d0900 	.word	0x003d0900

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b092      	sub	sp, #72	; 0x48
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80d4 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afc:	4b4e      	ldr	r3, [pc, #312]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10e      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b12:	61d3      	str	r3, [r2, #28]
 8004b14:	4b48      	ldr	r3, [pc, #288]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b26:	4b45      	ldr	r3, [pc, #276]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d118      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b32:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a41      	ldr	r2, [pc, #260]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3e:	f7fc feb7 	bl	80018b0 <HAL_GetTick>
 8004b42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	e008      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b46:	f7fc feb3 	bl	80018b0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b64      	cmp	r3, #100	; 0x64
 8004b52:	d901      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e169      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	4b38      	ldr	r3, [pc, #224]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b64:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8084 	beq.w	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d07c      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b84:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	461a      	mov	r2, r3
 8004bae:	2301      	movs	r3, #1
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	fa93 f3a3 	rbit	r3, r3
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d04b      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fc fe63 	bl	80018b0 <HAL_GetTick>
 8004bea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bee:	f7fc fe5f 	bl	80018b0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e113      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004c04:	2302      	movs	r3, #2
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c10:	2302      	movs	r3, #2
 8004c12:	623b      	str	r3, [r7, #32]
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
  return result;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d108      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c32:	4b01      	ldr	r3, [pc, #4]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	e00d      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	10908100 	.word	0x10908100
 8004c44:	2302      	movs	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	4b78      	ldr	r3, [pc, #480]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	2202      	movs	r2, #2
 8004c56:	613a      	str	r2, [r7, #16]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	fa92 f2a2 	rbit	r2, r2
 8004c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	fab2 f282 	clz	r2, r2
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f002 021f 	and.w	r2, r2, #31
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f202 	lsl.w	r2, r1, r2
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0b7      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c7e:	4b6d      	ldr	r3, [pc, #436]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	496a      	ldr	r1, [pc, #424]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c98:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a65      	ldr	r2, [pc, #404]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb0:	4b60      	ldr	r3, [pc, #384]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	f023 0203 	bic.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	495d      	ldr	r1, [pc, #372]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cce:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4956      	ldr	r1, [pc, #344]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cec:	4b51      	ldr	r3, [pc, #324]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	494e      	ldr	r1, [pc, #312]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f023 0210 	bic.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4947      	ldr	r1, [pc, #284]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d28:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	493f      	ldr	r1, [pc, #252]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d46:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f023 0220 	bic.w	r2, r3, #32
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	4938      	ldr	r1, [pc, #224]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d64:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	4930      	ldr	r1, [pc, #192]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4929      	ldr	r1, [pc, #164]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4921      	ldr	r1, [pc, #132]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	491a      	ldr	r1, [pc, #104]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	4912      	ldr	r1, [pc, #72]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	490b      	ldr	r1, [pc, #44]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	4903      	ldr	r1, [pc, #12]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3748      	adds	r7, #72	; 0x48
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000

08004e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e09d      	b.n	8004f86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5a:	d009      	beq.n	8004e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	61da      	str	r2, [r3, #28]
 8004e62:	e005      	b.n	8004e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc fb74 	bl	8001578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb0:	d902      	bls.n	8004eb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e002      	b.n	8004ebe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ec6:	d007      	beq.n	8004ed8 <HAL_SPI_Init+0xa0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	ea42 0103 	orr.w	r1, r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	f003 0204 	and.w	r2, r3, #4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f54:	ea42 0103 	orr.w	r1, r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b088      	sub	sp, #32
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_SPI_Transmit+0x22>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e158      	b.n	8005262 <HAL_SPI_Transmit+0x2d4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb8:	f7fc fc7a 	bl	80018b0 <HAL_GetTick>
 8004fbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d002      	beq.n	8004fd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fd2:	e13d      	b.n	8005250 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SPI_Transmit+0x52>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fe4:	e134      	b.n	8005250 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005030:	d10f      	bne.n	8005052 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d007      	beq.n	8005070 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005078:	d94b      	bls.n	8005112 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Transmit+0xfa>
 8005082:	8afb      	ldrh	r3, [r7, #22]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d13e      	bne.n	8005106 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050ac:	e02b      	b.n	8005106 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d112      	bne.n	80050e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	881a      	ldrh	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050e0:	e011      	b.n	8005106 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e2:	f7fc fbe5 	bl	80018b0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d803      	bhi.n	80050fa <HAL_SPI_Transmit+0x16c>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_Transmit+0x172>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005104:	e0a4      	b.n	8005250 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ce      	bne.n	80050ae <HAL_SPI_Transmit+0x120>
 8005110:	e07c      	b.n	800520c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Transmit+0x192>
 800511a:	8afb      	ldrh	r3, [r7, #22]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d170      	bne.n	8005202 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d912      	bls.n	8005150 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	881a      	ldrh	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	1c9a      	adds	r2, r3, #2
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b02      	subs	r3, #2
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800514e:	e058      	b.n	8005202 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005176:	e044      	b.n	8005202 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d12b      	bne.n	80051de <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d912      	bls.n	80051b6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	881a      	ldrh	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	1c9a      	adds	r2, r3, #2
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b02      	subs	r3, #2
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b4:	e025      	b.n	8005202 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051dc:	e011      	b.n	8005202 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051de:	f7fc fb67 	bl	80018b0 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d803      	bhi.n	80051f6 <HAL_SPI_Transmit+0x268>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d102      	bne.n	80051fc <HAL_SPI_Transmit+0x26e>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005200:	e026      	b.n	8005250 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1b5      	bne.n	8005178 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f941 	bl	8005498 <SPI_EndRxTxTransaction>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e000      	b.n	8005250 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800524e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005260:	7ffb      	ldrb	r3, [r7, #31]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800527c:	f7fc fb18 	bl	80018b0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4413      	add	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800528c:	f7fc fb10 	bl	80018b0 <HAL_GetTick>
 8005290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005292:	4b39      	ldr	r3, [pc, #228]	; (8005378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a2:	e054      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d050      	beq.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ac:	f7fc fb00 	bl	80018b0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d13d      	bne.n	800533e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052da:	d111      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	d004      	beq.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ee:	d107      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d10f      	bne.n	800532a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e017      	b.n	800536e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d19b      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000004 	.word	0x20000004

0800537c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800538a:	f7fc fa91 	bl	80018b0 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	4413      	add	r3, r2
 8005398:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800539a:	f7fc fa89 	bl	80018b0 <HAL_GetTick>
 800539e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053a0:	4b3c      	ldr	r3, [pc, #240]	; (8005494 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00da      	lsls	r2, r3, #3
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	0d1b      	lsrs	r3, r3, #20
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80053b8:	e05f      	b.n	800547a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053c0:	d106      	bne.n	80053d0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d050      	beq.n	800547a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d8:	f7fc fa6a 	bl	80018b0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d902      	bls.n	80053ee <SPI_WaitFifoStateUntilTimeout+0x72>
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d13d      	bne.n	800546a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d111      	bne.n	800542c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005410:	d004      	beq.n	800541c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541a:	d107      	bne.n	800542c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005434:	d10f      	bne.n	8005456 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e010      	b.n	800548c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3b01      	subs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d197      	bne.n	80053ba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000004 	.word	0x20000004

08005498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff ff63 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e027      	b.n	800551c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff fec8 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e014      	b.n	800551c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ff3c 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e000      	b.n	800551c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e049      	b.n	80055ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f856 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 f9ea 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e042      	b.n	8005672 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a21      	ldr	r2, [pc, #132]	; (8005680 <HAL_TIM_Base_Start+0xac>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_TIM_Base_Start+0x5c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d013      	beq.n	8005630 <HAL_TIM_Base_Start+0x5c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <HAL_TIM_Base_Start+0xb0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_Base_Start+0x5c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_TIM_Base_Start+0xb4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_Base_Start+0x5c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <HAL_TIM_Base_Start+0xb8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start+0x5c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a19      	ldr	r2, [pc, #100]	; (8005690 <HAL_TIM_Base_Start+0xbc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d115      	bne.n	800565c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	4b17      	ldr	r3, [pc, #92]	; (8005694 <HAL_TIM_Base_Start+0xc0>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d015      	beq.n	800566e <HAL_TIM_Base_Start+0x9a>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005648:	d011      	beq.n	800566e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565a:	e008      	b.n	800566e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e000      	b.n	8005670 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	00010007 	.word	0x00010007

08005698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0202 	mvn.w	r2, #2
 80056c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f90f 	bl	80058fe <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f901 	bl	80058ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f912 	bl	8005912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0204 	mvn.w	r2, #4
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8e5 	bl	80058fe <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8d7 	bl	80058ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8e8 	bl	8005912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0208 	mvn.w	r2, #8
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8bb 	bl	80058fe <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8ad 	bl	80058ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f8be 	bl	8005912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2208      	movs	r2, #8
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f891 	bl	80058fe <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f883 	bl	80058ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f894 	bl	8005912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0201 	mvn.w	r2, #1
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f85d 	bl	80058d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f994 	bl	8005b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005856:	d10e      	bne.n	8005876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d107      	bne.n	8005876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f987 	bl	8005b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d10e      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d107      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f842 	bl	8005926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0220 	mvn.w	r2, #32
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f947 	bl	8005b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <TIM_Base_SetConfig+0x104>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00f      	beq.n	8005974 <TIM_Base_SetConfig+0x38>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595a:	d00b      	beq.n	8005974 <TIM_Base_SetConfig+0x38>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a39      	ldr	r2, [pc, #228]	; (8005a44 <TIM_Base_SetConfig+0x108>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_Base_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a38      	ldr	r2, [pc, #224]	; (8005a48 <TIM_Base_SetConfig+0x10c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_Base_SetConfig+0x38>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a37      	ldr	r2, [pc, #220]	; (8005a4c <TIM_Base_SetConfig+0x110>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d108      	bne.n	8005986 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2d      	ldr	r2, [pc, #180]	; (8005a40 <TIM_Base_SetConfig+0x104>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01b      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d017      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <TIM_Base_SetConfig+0x108>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <TIM_Base_SetConfig+0x10c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <TIM_Base_SetConfig+0x110>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a26      	ldr	r2, [pc, #152]	; (8005a54 <TIM_Base_SetConfig+0x118>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <TIM_Base_SetConfig+0x11c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d108      	bne.n	80059d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <TIM_Base_SetConfig+0x104>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0xe8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <TIM_Base_SetConfig+0x110>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0xe8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0xe8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0f      	ldr	r2, [pc, #60]	; (8005a54 <TIM_Base_SetConfig+0x118>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0xe8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	; (8005a58 <TIM_Base_SetConfig+0x11c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e063      	b.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2b      	ldr	r2, [pc, #172]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2a      	ldr	r2, [pc, #168]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae6:	d013      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a18      	ldr	r2, [pc, #96]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a12      	ldr	r2, [pc, #72]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10c      	bne.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40013400 	.word	0x40013400
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40014000 	.word	0x40014000

08005b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ba0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ba4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bce:	b084      	sub	sp, #16
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	f107 0014 	add.w	r0, r7, #20
 8005bdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	b004      	add	sp, #16
 8005c0e:	4770      	bx	lr

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	4e0d      	ldr	r6, [pc, #52]	; (8005c48 <__libc_init_array+0x38>)
 8005c14:	4c0d      	ldr	r4, [pc, #52]	; (8005c4c <__libc_init_array+0x3c>)
 8005c16:	1ba4      	subs	r4, r4, r6
 8005c18:	10a4      	asrs	r4, r4, #2
 8005c1a:	2500      	movs	r5, #0
 8005c1c:	42a5      	cmp	r5, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	4e0b      	ldr	r6, [pc, #44]	; (8005c50 <__libc_init_array+0x40>)
 8005c22:	4c0c      	ldr	r4, [pc, #48]	; (8005c54 <__libc_init_array+0x44>)
 8005c24:	f000 f846 	bl	8005cb4 <_init>
 8005c28:	1ba4      	subs	r4, r4, r6
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	42a5      	cmp	r5, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c38:	4798      	blx	r3
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c42:	4798      	blx	r3
 8005c44:	3501      	adds	r5, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	080087a0 	.word	0x080087a0
 8005c4c:	080087a0 	.word	0x080087a0
 8005c50:	080087a0 	.word	0x080087a0
 8005c54:	080087a4 	.word	0x080087a4

08005c58 <memset>:
 8005c58:	4402      	add	r2, r0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <memset+0xa>
 8005c60:	4770      	bx	lr
 8005c62:	f803 1b01 	strb.w	r1, [r3], #1
 8005c66:	e7f9      	b.n	8005c5c <memset+0x4>

08005c68 <roundf>:
 8005c68:	ee10 0a10 	vmov	r0, s0
 8005c6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005c70:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8005c74:	2a16      	cmp	r2, #22
 8005c76:	dc15      	bgt.n	8005ca4 <roundf+0x3c>
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	da08      	bge.n	8005c8e <roundf+0x26>
 8005c7c:	3201      	adds	r2, #1
 8005c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005c82:	d101      	bne.n	8005c88 <roundf+0x20>
 8005c84:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005c88:	ee00 3a10 	vmov	s0, r3
 8005c8c:	4770      	bx	lr
 8005c8e:	4908      	ldr	r1, [pc, #32]	; (8005cb0 <roundf+0x48>)
 8005c90:	4111      	asrs	r1, r2
 8005c92:	4208      	tst	r0, r1
 8005c94:	d0fa      	beq.n	8005c8c <roundf+0x24>
 8005c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c9a:	4113      	asrs	r3, r2
 8005c9c:	4403      	add	r3, r0
 8005c9e:	ea23 0301 	bic.w	r3, r3, r1
 8005ca2:	e7f1      	b.n	8005c88 <roundf+0x20>
 8005ca4:	2a80      	cmp	r2, #128	; 0x80
 8005ca6:	d1f1      	bne.n	8005c8c <roundf+0x24>
 8005ca8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	007fffff 	.word	0x007fffff

08005cb4 <_init>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	bf00      	nop
 8005cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cba:	bc08      	pop	{r3}
 8005cbc:	469e      	mov	lr, r3
 8005cbe:	4770      	bx	lr

08005cc0 <_fini>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr
